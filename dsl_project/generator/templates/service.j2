package uns.ac.rs.mbrs.service;

import javassist.NotFoundException;
import java.util.ArrayList;
import uns.ac.rs.mbrs.repository.*;
import uns.ac.rs.mbrs.model.*;
import uns.ac.rs.mbrs.mapper.*;
import uns.ac.rs.mbrs.dtos.*;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
@Service
@Transactional
public class {{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}Service  {

    {% set processed_types = [] %}
    private final {{ current_class.name[0]| capitalize }}{{ current_class.name[1:] }}Mapper {{ current_class.name | lower }}Mapper;
    private final {{ current_class.name[0]| capitalize }}{{ current_class.name[1:] }}Repository {{ current_class.name | lower }}Repository;
    {% set _ = processed_types.append(current_class.name) %}
    {% for property in current_class.reference_properties %}
        {% if property.type not in processed_types %}
    private final {{ property.type }}Repository {{ property.type | lower }}Repository;
    private final {{ property.type }}Mapper {{ property.type | lower }}Mapper;
            {% set _ = processed_types.append(property.type) %}
        {% endif %}
    {% endfor %}

    public {{ current_class.name }}Service(
    {{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}Mapper {{ current_class.name | lower }}Mapper,
    {{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}Repository {{ current_class.name | lower }}Repository
    {% set processed_types = [] %}
    {% set _ = processed_types.append(current_class.name) %}
    {% for property in current_class.reference_properties %}
        {% if property.type not in processed_types %}
            ,{{ property.type }}Repository {{ property.name | lower }}Repository
            ,{{ property.type }}Mapper {{ property.type | lower }}Mapper
            {% set _ = processed_types.append(property.type) %}
        {% endif %}
    {% endfor %}
) {
        this.{{ current_class.name | lower }}Mapper = {{ current_class.name | lower }}Mapper;
        this.{{ current_class.name | lower }}Repository = {{ current_class.name | lower }}Repository;
        {% set processed_types = [] %}
        {% set _ = processed_types.append(current_class.name) %}
        {% for property in current_class.reference_properties %}
            {% if property.type not in processed_types %}
        this.{{ property.type | lower }}Repository = {{ property.name | lower }}Repository;

        this.{{ property.type | lower }}Mapper = {{ property.type | lower }}Mapper;
                {% set _ = processed_types.append(property.type) %}
            {% endif %}
{% endfor %}
    }

    @Transactional
    public {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}DTO save({{ current_class.name }}DTO {{ current_class.name | lower }}dto) {

        {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }} {{ current_class.name[0]|lower }}{{ current_class.name[1:] }} = {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}Mapper.toModel({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}dto);

        {% for prop in current_class.reference_properties %}
        {% if prop.upper == -1 %}
        {% if not "_" in prop.mapped_by|string %}
        List<{{ prop.type | capitalize }}> {{ prop.name | lower }}s = new ArrayList<>();
        for (Long d : {{ current_class.name | lower }}dto.get{{ prop.name[0] | capitalize }}{{ prop.name[1:] }}Ids()) {
            {{ prop.type | capitalize }} {{ prop.type | lower }} = {{ prop.type | lower }}Repository.getById(d);
            {{ prop.name | lower }}s.add({{ prop.type | lower }});

{% set found = [] %}
{% for model_cl in model.classes if not found %}
    {% if model_cl.name == prop.name %}
        {% for p in model_cl.reference_properties %}
            {% if p.name == current_class.name %}
                {% set _ = found.append(1) %}
                {% if prop.cardinality == 'OneToMany' %}

                {{ prop.type | lower }}.set{% if p.as_part != "" and p.as_part!="*" %}{{ p.as_part[0] | capitalize }}{{ p.as_part[1:] }}{% else %}{{ p.name[0] | capitalize }}{{ p.name[1:] }}{% endif %}({{ p.name[0] | lower }}{{ p.name[1:] }});

                {% else %}
                //todo pazi na liste
                {{ prop.type | lower }}.get{% if p.as_part != "" and p.as_part!="*"%}{{ p.as_part[0] | capitalize }}{{ p.as_part[1:] }}{% else %}{{ p.name[0] | capitalize }}{{ p.name[1:] }}{% endif %}().add({{ p.name[0] | lower }}{{ p.name[1:] }});
            {% endif %}
            {% endif %}
        {% endfor %}
        {% if 1 not in found %}
        {% if prop.cardinality == 'OneToMany' %}
        {{ prop.type | lower }}.set{{ current_class.name[0] | capitalize }}{{ current_class.name[1:] }}({{ current_class.name[0] | lower }}{{ current_class.name[1:] }});
        {%else%}
        {% if prop.cardinality == 'OneToOne' %}
        {{ prop.type | lower }}.set{{ current_class.name[0] | capitalize }}{{ current_class.name[1:] }}({{ current_class.name[0] | lower }}{{ current_class.name[1:] }});

        {%else%}
    {{ prop.type | lower }}.get{{ current_class.name[0] | capitalize }}{{ current_class.name[1:] }}().add({{ current_class.name[0] | lower }}{{ current_class.name[1:] }});
{% endif %}{% endif %}
{% endif %}
    {% endif %}
{% endfor %}

        }

        {{ current_class.name | lower }}.set{% if prop.as_part != "" and prop.as_part!="*"%}{{ prop.as_part | capitalize }}({{ prop.name | lower }}s){%else%}{{ prop.name | capitalize }}({{ prop.name | lower }}s){%endif%};
        {% endif %}
{% endif %}
        {% if prop.upper != -1 %}
        {% if not "_" in prop.mapped_by|string %}
       //ovde
{% set found = [] %}
{% for model_cl in model.classes if not found %}
    {% if model_cl.name == prop.name %}
        {% for p in model_cl.reference_properties %}
            {% if p.name == current_class.name %}
                {% set _ = found.append(1) %}

                    {% if prop.cardinality == 'OneToMany' %}

                    {{ prop.type | capitalize }} {{ prop.type | lower }} ={{ prop.type | lower }}Repository.getById({{ current_class.name | lower }}dto.getId());
                    {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.set{% if p.as_part!="" and p.as_part!="*"%}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}{%endif%}({{ prop.type | lower }});

                    {{ prop.type | lower }}.set{% if p.as_part!="" and p.as_part!="*"%}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ p.name[0]|capitalize }}{{ p.name[1:]}}{%endif%}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});

                    {% else %}
                    if({{ current_class.name | lower }}dto.get{% if prop.as_part!="" and prop.as_part!="*"%}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}{%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}{%endif%}()!=null) {
                    {{ prop.type | capitalize }} {{ prop.type | lower }} ={{ prop.type | lower }}Repository.getById({{ current_class.name | lower }}dto.get{% if prop.as_part!="" and prop.as_part!="*"%}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}(){%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}(){%endif%}.getId()); //tuuu
                    {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.set{% if prop.as_part!="" and prop.as_part!="*"%}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}{%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}{%endif%}({{ prop.type | lower }});
                     {%if prop.cardinality != 'OneToOne'%}
                    {{ prop.type | lower }}.get{% if p.as_part!="" and p.as_part!="*"%}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ p.name[0]|capitalize }}{{ p.name[1:]}}{%endif%}().add({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});
                     {%else%}
                     {{ prop.type | lower }}.set{% if p.as_part!="" and p.as_part!="*"%}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ p.name[0]|capitalize }}{{ p.name[1:]}}{%endif%}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});

{% endif %}
}
{% endif %}
        {% endif %}
        {% endfor %}
                {% if 1 not in found %}
                 {% if prop.cardinality == 'OneToMany' %}
                 {{ prop.type | lower }}.get{{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});

                  {% else %}
                  {% if prop.cardinality != 'OneToOne' %} //proveri ovde i gore
        {{ prop.type | lower }}.get{{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}}().add({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});
        {%else%}
        {{ prop.type | lower }}.set{{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});

        {% endif %}
        {% endif %}
        {% endif %}
        {% endif %}
        {% endfor %}

        {% endif %}
        {% endif %}
        {% endfor %}
        {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }} s = {{ current_class.name | lower }}Repository.save({{ current_class.name | lower }});

        return {{ current_class.name | lower }}Mapper.toDTO({{ current_class.name | lower }});
    }

    public {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}DTO update(long id,{{ current_class.name }}DTO {{ current_class.name | lower }}dto) {
    Optional<{{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}> {{ current_class.name[0]|lower }}{{ current_class.name[1:] }} = {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}Repository.findById(id);
    if ({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.isPresent()){
            {% for property in current_class.attributes %}
            {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get().set{{property.name[0]|capitalize}}{{property.name[1:]}}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}dto.get{{property.name[0]|capitalize}}{{property.name[1:]}}());
            {%endfor%}



                    {% for prop in current_class.reference_properties %}
        {% if prop.upper == -1 %}
        {% if not "_" in prop.mapped_by|string %}
        List<{{ prop.type | capitalize }}> {{ prop.name | lower }}s = new ArrayList<>();
        for (Long d : {{ current_class.name | lower }}dto.get{{ prop.name[0] | capitalize }}{{ prop.name[1:] }}Ids()) {
            {{ prop.type | capitalize }} {{ prop.type | lower }} = {{ prop.type | lower }}Repository.getById(d);
            {{ prop.name | lower }}s.add({{ prop.type | lower }});

{% set found = [] %}
{% for model_cl in model.classes if not found %}
    {% if model_cl.name == prop.name %}
        {% for p in model_cl.reference_properties %}
            {% if p.name == current_class.name %}
                {% set _ = found.append(1) %}
                {% if prop.cardinality == 'OneToMany' %}

                {{ prop.type | lower }}.set{% if p.as_part != "" and p.as_part!="*"%}{{ p.as_part[0] | capitalize }}{{ p.as_part[1:] }}{% else %}{{ p.name[0] | capitalize }}{{ p.name[1:] }}{% endif %}({{ p.name[0] | lower }}{{ p.name[1:] }}.get());

                {% else %}
                //todo pazi na liste
                {% if prop.cardinality == 'OneToOne' %}
                {{ prop.type | lower }}.set{% if p.as_part != "" and p.as_part!="*"%}{{ p.as_part[0] | capitalize }}{{ p.as_part[1:] }}{% else %}{{ p.name[0] | capitalize }}{{ p.name[1:] }}{% endif %}({{ p.name[0] | lower }}{{ p.name[1:] }}.get());
                {%else%}
                 {{ prop.type | lower }}.get{% if p.as_part != "" and p.as_part!="*"%}{{ p.as_part[0] | capitalize }}{{ p.as_part[1:] }}{% else %}{{ p.name[0] | capitalize }}{{ p.name[1:] }}{% endif %}().add({{ p.name[0] | lower }}{{ p.name[1:] }}.get());
{% endif %}
            {% endif %}
            {% endif %}
        {% endfor %}
        {% if 1 not in found %}
        {% if prop.cardinality == 'OneToMany' %}
        {{ prop.type | lower }}.set{{ current_class.name[0] | capitalize }}{{ current_class.name[1:] }}({{ current_class.name[0] | lower }}{{ current_class.name[1:] }});
        {%else%}
        {% if prop.cardinality != 'OneToOne' %}
    {{ prop.type | lower }}.get{{ current_class.name[0] | capitalize }}{{ current_class.name[1:] }}().add({{ current_class.name[0] | lower }}{{ current_class.name[1:] }});
    {%else%}
    {{ prop.type | lower }}.set{{ current_class.name[0] | capitalize }}{{ current_class.name[1:] }}({{ current_class.name[0] | lower }}{{ current_class.name[1:] }});

{% endif %}
{% endif %}
{% endif %}
    {% endif %}
{% endfor %}

        }

        {{ current_class.name | lower }}.get().set{% if prop.as_part != "" and prop.as_part!="*"%}{{ prop.as_part | capitalize }}({{ prop.name | lower }}s){%else%}{{ prop.name | capitalize }}({{ prop.name | lower }}s){%endif%};
        {% endif %}
{% endif %}
        {% if prop.upper != -1 %}
        {% if not "_" in prop.mapped_by|string %}
       //ovde
{% set found = [] %}
{% for model_cl in model.classes if not found %}
    {% if model_cl.name == prop.name %}
        {% for p in model_cl.reference_properties %}
            {% if p.name == current_class.name %}
                {% set _ = found.append(1) %}
                    if({{ current_class.name | lower }}dto.get{% if prop.as_part!="" and prop.as_part!="*"%}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}{%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}{%endif%}()!=null) {

                    {% if prop.cardinality == 'OneToMany' %}
                   {{ prop.type | capitalize }} {{ prop.type | lower }} ={{ prop.type | lower }}Repository.getById({{ current_class.name | lower }}dto.getId());
                    {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get().set{% if p.as_part!="" and p.as_part!="*"%}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}{%endif%}({{ prop.type | lower }});

                    {{ prop.type | lower }}.set{% if p.as_part!="" and prop.as_part!="*"%}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ p.name[0]|capitalize }}{{ p.name[1:]}}{%endif%}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});

                    {% else %}
                    {{ prop.type | capitalize }} {{ prop.type | lower }} ={{ prop.type | lower }}Repository.getById({{ current_class.name | lower }}dto.get{% if prop.as_part!="" and prop.as_part!="*"%}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}(){%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}(){%endif%}.getId());
                    {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get().set{% if prop.as_part!="" and prop.as_part!="*"%}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}{%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}{%endif%}({{ prop.type | lower }});
{% if prop.cardinality != 'OneToOne' %}
                    {{ prop.type | lower }}.get{% if p.as_part!="" and p.as_part!="*"%}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ p.name[0]|capitalize }}{{ p.name[1:]}}{%endif%}().add({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get());
{%else%}
                    {{ prop.type | lower }}.set{% if p.as_part!="" and p.as_part!="*"%}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ p.name[0]|capitalize }}{{ p.name[1:]}}{%endif%}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get());

{% endif %}
}
{% endif %}
        {% endif %}
        {% endfor %}
                {% if 1 not in found %}
                 {% if prop.cardinality == 'OneToMany' %}
                 {{ prop.type | lower }}.get{{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});

                  {% else %}
                  {% if prop.cardinality != 'OneToOne' %}
        {{ prop.type | lower }}.get{{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}}().add({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get());
        {%else%}
        {{ prop.type | lower }}.set{{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get());

        {% endif %}
        {% endif %}
        {% endif %}
        {% endif %}
        {% endfor %}

        {% endif %}
        {% endif %}
        {% endfor %}
            {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }} s = {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}Repository.save({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get());
            return {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}Mapper.toDTO(s);
        }
        return null;


       }

     public Optional<{{ current_class.name }}> partialUpdate({{ current_class.name }} {{ current_class.name|lower }}) {

    return {{ current_class.name|lower }}Repository
        {% if hasIdProperty %}
        .findById({{ current_class.name|lower }}.get{{ idName|capitalize }}())
        {% else %}
        .findById({{ current_class.name|lower }}.getId())
        {% endif %}
        .map(existing{{ current_class.name }} -> {

            {% for property in current_class.attributes %}
            {% if property.type == "String" or property.type == "char" %}
            if ({{ current_class.name|lower }}.get{{ property.name[0]|capitalize }}{{ property.name[1:]}}() != null) {
            {% elif property.type == "boolean" %}
            if ({{ current_class.name|lower }}.get{{ property.name[0]|capitalize }}{{ property.name[1:]}}() != false) {
            {% elif property.type in ["int", "Integer", "double", "Double", "long", "float"] %}
            if ({{ current_class.name|lower }}.get{{ property.name[0]|capitalize }}{{ property.name[1:]}}() != 0) {
            {% else %}
            if ({{ current_class.name|lower }}.get{{ property.name[0]|capitalize }}{{ property.name[1:]}}() != null) {
            {% endif %}
                existing{{ current_class.name }}.set{{ property.name[0]|capitalize }}{{ property.name[1:]}}({{ current_class.name|lower }}.get{{ property.name[0]|capitalize }}{{ property.name[1:]}}());
            }
            {% endfor %}

            return existing{{ current_class.name }};
        })
        .map({{ current_class.name|lower }}Repository::save);
}

@Transactional(readOnly = true)
public List<{{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}DTO> findAll() {
    List<{{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}> {{ current_class.name|lower }}s = {{ current_class.name|lower }}Repository.findAll();
    List<{{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}DTO> dtos = new ArrayList<>();
    for ({{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}} s : {{ current_class.name|lower }}s){
        {{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}DTO dto = {{ current_class.name| lower }}Mapper.toDTO(s);
        dtos.add(dto);
    }
    return dtos;
}

@Transactional(readOnly = true)
public {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}DTO findOne(Long id) throws NotFoundException {
    Optional<{{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}> maybe{{ current_class.name }} =  {{ current_class.name|lower }}Repository.findById(id);
    if (maybe{{ current_class.name }}.isPresent()) {
        {{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}} {{ current_class.name|lower }} = maybe{{ current_class.name }}.get();
        {% for property in current_class.reference_properties %}
        {% if property.upper == 1 %}
        {{ property.name[0]|capitalize }}{{ property.name[1:] }} {{ property.name|lower }} = {{ property.name }}Repository.getById({{ current_class.name|lower }}.get{{ property.name|capitalize }}().getId());
        {{ current_class.name|lower }}.set{{ property.name|capitalize }}({{ property.name }});
        {% endif %}
        {% endfor %}
        return {{ current_class.name|lower }}Mapper.toDTO({{ current_class.name|lower }});
    }
    throw new NotFoundException("");
}

public void delete(Long id) {
    Optional<{{ current_class.name }}> maybe{{ current_class.name }} = {{ current_class.name|lower }}Repository.findById(id);

    if (maybe{{ current_class.name }}.isPresent()) {
        {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }} existing{{ current_class.name }} = maybe{{ current_class.name }}.get();
        existing{{ current_class.name }}.setDeleted(true);
        {% for property in current_class.reference_properties %}
        if (existing{{ current_class.name }}.get{% if property.as_part!="" and property.as_part!="*" %}{{ property.as_part[0]|capitalize }}{{ property.as_part[1:]}}{%else%}{{ property.name[0]|capitalize }}{{ property.name[1:]}}{%endif%}() != null){
            {% if property.upper == -1 %}
            for ({{ property.type }} p: existing{{ current_class.name }}.get{% if property.as_part !="" and property.as_part!="*" %}{{ property.as_part[0]|capitalize }}{{ property.as_part[1:]}}{% else %}{{ property.name[0]|capitalize }}{{ property.name[1:]}}{% endif %}()){
                p.setDeleted(true);
            }
            {% else %}
            existing{{ current_class.name }}.get{% if property.as_part!="" and property.as_part!="*"%}{{ property.as_part[0]|capitalize }}{{ property.as_part[1:]}}{%else%}{{ property.name[0]|capitalize }}{{ property.name[1:]}}{%endif%}().setDeleted(true);
            {% endif %}
        }
        {% endfor %}

        {{ current_class.name|lower }}Repository.save(existing{{ current_class.name }});
    }
}

{% for prop in reference_properties %}
    {% if prop.upper == -1 and prop.cardinality == "ManyToMany" %}
    public Object find{{ prop.name|capitalize }}Of{{ current_class.name|capitalize }}({{ idType }} {{ idName }}) {
        Optional<{{ current_class.name|capitalize }}> {{ current_class.name|lower }}={{ current_class.name|lower }}Repository.findById({{ idName }});
        if ({{ current_class.name|lower }}.isPresent()){
            List<{{ prop.type.name[0]|capitalize }}{{ prop.type.name[1:] }}DTO> dtos = new ArrayList<>();
            for ({{ prop.type|capitalize }} g : {{ current_class.name|lower }}.get().get{{ prop.name|capitalize }}()){
                {{ prop.type|capitalize }}DTO dto = {{ prop.type|lower }}Mapper.toDTO(g);
                dtos.add(dto);
            }
            return dtos;
        }
        return new ArrayList<>();
    }
    {% elif prop.upper == -1 and prop.cardinality == "OneToMany" %}
    public List<{{ prop.type|capitalize }}DTO> find{{ prop.name|capitalize }}Of{{ current_class.name|capitalize }}({{ idType }} {{ idName }}) {
        List<{{ prop.type|capitalize }}> {{ prop.type|lower }}s = {{ prop.type|lower }}Repository.findAllBy{{ current_class.name|capitalize }}Id({{ idName }});
        List<{{ prop.type|capitalize }}DTO> dtos = new ArrayList<>();
        for ({{ prop.type|capitalize }} {{ prop.type|lower }} : {{ prop.type|lower }}s){
            dtos.add({{ prop.type|lower }}Mapper.toDTO({{ prop.type|lower }}));
        }
        return dtos;
    }
    {% endif %}
{% endfor %}

     public List<{{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}DTO> get() {
        List<{{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}> list = {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}Repository.findAll();
        List<{{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}DTO> list2 = new ArrayList<>();
        for({{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }} a : list){
            list2.add({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}Mapper.toDTO(a));
        }
        return list2;
    }

}