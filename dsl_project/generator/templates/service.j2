package uns.ac.rs.mbrs.service;

import javassist.NotFoundException;
import java.util.ArrayList;
import uns.ac.rs.mbrs.repository.*;
import uns.ac.rs.mbrs.model.*;
import uns.ac.rs.mbrs.mapper.*;
import uns.ac.rs.mbrs.dtos.*;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
{% if current_class.anotation%}
        {% if current_class.anotation.name=="action"%}
import uns.ac.rs.mbrs.utils.CallPyController;
import uns.ac.rs.mbrs.utils.DynamicCodeExecution;
import java.util.Date;
        {%endif%}
    {%endif%}
{% set basket_name_to = [] %}
{% set item_name_to = [] %}
{% for cl in model.classes%}
    {% if cl.anotation and cl.anotation.name=="basket" %}
        {% set _ = basket_name_to.append(cl.name) %}
    {%endif%}
    {% if cl.anotation and (cl.anotation.name=="item" or cl.anotation.name=="Item" ) %}
        {% set _ = item_name_to.append(cl.name) %}
    {%endif%}
{%endfor%}


@Service
@Transactional
public class {{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}Service  {

    {% set processed_types = [] %}
    private final {{ current_class.name[0]| capitalize }}{{ current_class.name[1:] }}Mapper {{ current_class.name | lower }}Mapper;
    private final {{ current_class.name[0]| capitalize }}{{ current_class.name[1:] }}Repository {{ current_class.name | lower }}Repository;
    {% set _ = processed_types.append(current_class.name) %}
    {% for property in current_class.reference_properties %}
        {% if property.type not in processed_types %}
    private final {{ property.type }}Repository {{ property.type | lower }}Repository;
    private final {{ property.type }}Mapper {{ property.type | lower }}Mapper;
            {% set _ = processed_types.append(property.type) %}
        {% endif %}
    {% endfor %}
    {% for cl in model.classes%}
        {% if cl.name not in processed_types and cl.anotation and current_class.anotation %}
        {% if current_class.anotation.name=="bying" and cl.anotation.name =="item"%}
     private final {{ cl.name }}Repository {{ cl.name | lower }}Repository;
    {%endif%}
        {% if cl.anotation.name == "action" and current_class.anotation.name == "bill"%}
    private final {{ cl.name[0] | capitalize }}{{ cl.name[1:]}}Service  {{ cl.name | lower }}Service;
              {% set _ = processed_types.append(cl.name) %}
            {%endif%}
            {% if cl.anotation.name == "bying" and current_class.anotation.name == "bill"%}
    private final {{ cl.name }}Repository {{ cl.name | lower }}Repository;
              {% set _ = processed_types.append(cl.name) %}
            {% endif %}
        {% endif %}
    {% endfor %}
    {% if current_class.anotation%}
        {% if current_class.anotation.name=="action"%}
             private final CallPyController callPyController;
             private final DynamicCodeExecution dynamicCodeExecution;
        {%endif%}
        {% if current_class.anotation.name=="basket"%}
            private final {{item_name_to[0][0] | capitalize}}{{item_name_to[0][1:]}}Repository {{item_name_to[0][0] | lower}}{{item_name_to[0][1:]}}Repository;
         {%endif%}
         {% if current_class.anotation.name=="bill"%}
            private final {{basket_name_to[0][0] | capitalize}}{{basket_name_to[0][1:]}}Repository {{basket_name_to[0][0] | lower}}{{basket_name_to[0][1:]}}Repository;
         {%endif%}
    {%endif%}

    public {{ current_class.name }}Service(
    {{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}Mapper {{ current_class.name | lower }}Mapper,
    {{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}Repository {{ current_class.name | lower }}Repository
    {% set processed_types = [] %}
    {% set _ = processed_types.append(current_class.name) %}
    {% for property in current_class.reference_properties %}
        {% if property.type not in processed_types %}
            ,{{ property.type }}Repository {{ property.name | lower }}Repository
            ,{{ property.type }}Mapper {{ property.type | lower }}Mapper
            {% set _ = processed_types.append(property.type) %}
        {% endif %}
    {% endfor %}
    {% for cl in model.classes%}
    {% if current_class.anotation.name=="bying" and cl.anotation.name =="item"%}
     ,{{ cl.name }}Repository {{ cl.name | lower }}Repository
    {%endif%}
        {% if cl.name not in processed_types and cl.anotation and current_class.anotation %}
        {% if cl.anotation.name == "action" and current_class.anotation.name == "bill"%}
            , {{ cl.name[0] | capitalize }}{{ cl.name[1:] }}Service  {{ cl.name | lower }}Service
              {% set _ = processed_types.append(cl.name) %}
            {%endif%}
            {% if cl.anotation.name == "bying" and current_class.anotation.name == "bill"%}
             ,{{ cl.name }}Repository {{ cl.name | lower }}Repository
              {% set _ = processed_types.append(cl.name) %}
            {% endif %}
        {% endif %}
    {% endfor %}
     {% if current_class.anotation%}
        {% if current_class.anotation.name=="action"%}
            , CallPyController callPyController,
    DynamicCodeExecution dynamicCodeExecution
        {%endif%}
         {% if current_class.anotation.name=="basket"%}
           ,{{item_name_to[0][0] | capitalize}}{{item_name_to[0][1:]}}Repository {{item_name_to[0][0] | lower}}{{item_name_to[0][1:]}}Repository
         {%endif%}
         {% if current_class.anotation.name=="bill"%}
           ,{{basket_name_to[0][0] | capitalize}}{{basket_name_to[0][1:]}}Repository {{basket_name_to[0][0] | lower}}{{basket_name_to[0][1:]}}Repository
         {%endif%}
    {%endif%}
) {

        this.{{ current_class.name | lower }}Mapper = {{ current_class.name | lower }}Mapper;
        this.{{ current_class.name | lower }}Repository = {{ current_class.name | lower }}Repository;
        {% set processed_types = [] %}
        {% set basket_name = [] %}
        {% set action_name = [] %}
         {% set action_name_f = [] %}
        {% set _ = processed_types.append(current_class.name) %}
        {% for property in current_class.reference_properties %}
            {% if property.type not in processed_types %}
        this.{{ property.type | lower }}Repository = {{ property.name | lower }}Repository;

        this.{{ property.type | lower }}Mapper = {{ property.type | lower }}Mapper;
                {% set _ = processed_types.append(property.type) %}
            {% endif %}
{% endfor %}
        {% for cl in model.classes%}
        {% if current_class.anotation.name=="bying" and cl.anotation.name =="item"%}
         this.{{ cl.name|lower }}Repository ={{ cl.name | lower }}Repository;
        {%endif%}
            {% if cl.anotation%}
                {% if cl.anotation.name =="basket"%}
                   {% set _ =basket_name.append(cl.name) %}
                {%endif%}
            {%endif%}
        {% if cl.name not in processed_types and cl.anotation and current_class.anotation %}
            {% if cl.anotation.name == "action" and current_class.anotation.name == "bill"%}
            this.{{ cl.name | lower }}Service = {{ cl.name | lower }}Service;
              {% set _ = processed_types.append(cl.name) %}
              {% set _= action_name.append(cl.name) %}
              {% set _= action_name_f.append(cl.anotation.name_f) %}
            {%endif%}
            {% if cl.anotation.name == "bying" and current_class.anotation.name == "bill"%}
             this.{{ cl.name| lower }}Repository = {{ cl.name | lower }}Repository;
              {% set _ = processed_types.append(cl.name) %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if current_class.anotation%}
        {% if current_class.anotation.name=="action"%}
        this.callPyController = callPyController;
        this.dynamicCodeExecution = dynamicCodeExecution;
        {%endif%}
         {% if current_class.anotation.name=="basket"%}
           this.{{item_name_to[0][0] | lower}}{{item_name_to[0][1:]}}Repository = {{item_name_to[0][0] | lower}}{{item_name_to[0][1:]}}Repository;
         {%endif%}
         {% if current_class.anotation.name=="bill"%}
           this.{{basket_name_to[0][0] | lower}}{{basket_name_to[0][1:]}}Repository = {{basket_name_to[0][0] | lower}}{{basket_name_to[0][1:]}}Repository;
         {%endif%}
    {%endif%}
    }
  @Transactional
public {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}DTO save({%if current_class.anotation.name=="bill"%} {{basket_name[0][0]|capitalize}}{{basket_name[0][1:]}}DTO {{basket_name[0][0]|lower}}{{basket_name[0][1:]}}dto {%else%} {{ current_class.name }}DTO {{ current_class.name | lower }}dto{%endif%}){% if current_class.anotation%} {% if current_class.anotation.name=="bill"%} throws Exception{%endif%}{%endif%}{

    {% if current_class.anotation%}
        {% if current_class.anotation.name=="bill"%}
            {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }} {{ current_class.name[0]|lower }}{{ current_class.name[1:] }} = new {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}();
        {%else%}
            {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }} {{ current_class.name[0]|lower }}{{ current_class.name[1:] }} = {{ current_class.name|lower }}Mapper.toModel({{ current_class.name|lower }}dto);
        {%endif%}
    {%else%}
        {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }} {{ current_class.name[0]|lower }}{{ current_class.name[1:] }} = {{ current_class.name|lower }}Mapper.toModel({{ current_class.name|lower }}dto);
    {%endif%}
    {% if current_class.anotation%}
        {% if current_class.anotation.name=="bying"%}
    ItemWithPrice old = itemwithpriceRepository.findByItemIdAndIsCurrent(itemwithpricedto.getItem().getId());
      if (old!=null){
          old.setIscurrent(false);
          itemwithpriceRepository.save(old);
      }
      Item item = itemRepository.getById(itemwithpricedto.getItem().getId());
      item.getItemWithPrice().add(itemWithPrice);
      itemWithPrice.setItem(item);
    {%endif%}
    {%endif%}
    {% for prop in current_class.reference_properties %}
        {% if prop.upper == -1 %}
            {% if not "_" in prop.mapped_by|string %}
                List<{{ prop.type | capitalize }}> {{ prop.name | lower }}s = new ArrayList<>();
                for (Long d : {{ current_class.name | lower }}dto.get{{ prop.name[0] | capitalize }}{{ prop.name[1:] }}Ids()) {
                    {{ prop.type | capitalize }} {{ prop.type | lower }} = {{ prop.type | lower }}Repository.getById(d);
                    {{ prop.name | lower }}s.add({{ prop.type | lower }});

                    {% set found = [] %}
                    {% for model_cl in model.classes if not found %}
                        {% if model_cl.name == prop.name %}
                            {% for p in model_cl.reference_properties %}
                                {% if p.name == current_class.name %}
                                    {% set _ = found.append(1) %}
                                    {% if prop.cardinality == 'OneToMany' %}
                                        {{ prop.type | lower }}.set{% if p.as_part != "" and p.as_part!="*" %}{{ p.as_part[0] | capitalize }}{{ p.as_part[1:] }}{% else %}{{ p.name[0] | capitalize }}{{ p.name[1:] }}{% endif %}({{ p.name[0] | lower }}{{ p.name[1:] }});
                                    {% else %}
                                        {{ prop.type | lower }}.get{% if p.as_part != "" and p.as_part!="*"%}{{ p.as_part[0] | capitalize }}{{ p.as_part[1:] }}{% else %}{{ p.name[0] | capitalize }}{{ p.name[1:] }}{% endif %}().add({{ p.name[0] | lower }}{{ p.name[1:] }});
                                    {% endif %}
                                {% endif %}
                            {% endfor %}
                            {% if 1 not in found %}
                                {% if prop.cardinality == 'OneToMany' %}
                                    {{ prop.type | lower }}.set{{ current_class.name[0] | capitalize }}{{ current_class.name[1:] }}({{ current_class.name[0] | lower }}{{ current_class.name[1:] }});
                                {%else%}
                                    {% if prop.cardinality == 'OneToOne' %}
                                        {{ prop.type | lower }}.set{{ current_class.name[0] | capitalize }}{{ current_class.name[1:] }}({{ current_class.name[0] | lower }}{{ current_class.name[1:] }});
                                    {%else%}
                                        {{ prop.type | lower }}.get{{ current_class.name[0] | capitalize }}{{ current_class.name[1:] }}().add({{ current_class.name[0] | lower }}{{ current_class.name[1:] }});
                                    {% endif %}
                                {% endif %}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                }
                {{ current_class.name | lower }}.set{% if prop.as_part != "" and prop.as_part!="*"%}{{ prop.as_part | capitalize }}({{ prop.name | lower }}s){%else%}{{ prop.name | capitalize }}({{ prop.name | lower }}s){%endif%};
            {% endif %}
        {% endif %}
        {% if prop.upper != -1 %}
            {% if not "_" in prop.mapped_by|string %}
                {% set found = [] %}
                {% for model_cl in model.classes if not found %}
                    {% if model_cl.name == prop.name %}
                        {% for p in model_cl.reference_properties %}
                            {% if p.name == current_class.name %}
                                {% set _ = found.append(1) %}
                                {% if prop.cardinality == 'OneToMany' %}
                                    {{ prop.type | capitalize }} {{ prop.type | lower }} = {{ prop.type | lower }}Repository.getById({{ current_class.name | lower }}dto.getId());
                                    {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.set{% if p.as_part!="" and p.as_part!="*" %}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}{%endif%}({{ prop.type | lower }});
                                    {{ prop.type | lower }}.set{% if p.as_part!="" and p.as_part!="*" %}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ p.name[0]|capitalize }}{{ p.name[1:]}}{%endif%}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});
                                {% else %}
                                    {%if prop.name=='customer' or prop.name=='Customer' %}
                                    if({% if current_class.anotation%} {% if current_class.anotation.name=="bill"%}basketdto{%else%}{{ current_class.name | lower }}dto{%endif%}{%else%}{{ current_class.name | lower }}dto{%endif%}.get{% if prop.as_part!="" and prop.as_part!="*" %}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}{%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}{%endif%}()!=null) {
                                        {% if is_str(prop.type) %}
                                        {{ prop.type[0] | capitalize }}{{ prop.type[1:]}} {{ prop.type | lower }} = {{ prop.type | lower }}Repository.getById({% if current_class.anotation%} {% if current_class.anotation.name=="bill"%}basketdto{%else%}{{ current_class.name | lower }}dto{%endif%}{%else%}{{ current_class.name | lower }}dto{%endif%}.get{% if prop.as_part!="" and prop.as_part!="*" %}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}(){%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}(){%endif%}.getId());
                                        {%else%}
                                        {{ prop.type.name[0] | capitalize }}{{ prop.type.name[1:]}} {{ prop.type | lower }} = {{ prop.type | lower }}Repository.getById({% if current_class.anotation%} {% if current_class.anotation.name=="bill"%}basketdto{%else%}{{ current_class.name | lower }}dto{%endif%}{%else%}{{ current_class.name | lower }}dto{%endif%}.get{% if prop.as_part!="" and prop.as_part!="*" %}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}(){%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}(){%endif%}.getId());
                                        {%endif%}
                                        {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.set{% if prop.as_part!="" and prop.as_part!="*" %}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}{%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}{%endif%}({{ prop.type | lower }});
                                        {% if prop.cardinality != 'OneToOne' %}
                                            {{ prop.type | lower }}.get{% if p.as_part!="" and p.as_part!="*" %}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ p.name[0]|capitalize }}{{ p.name[1:]}}{%endif%}().add({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});
                                        {%else%}
                                            {{ prop.type | lower }}.set{% if p.as_part!="" and p.as_part!="*" %}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ p.name[0]|capitalize }}{{ p.name[1:]}}{%endif%}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});
                                        {% endif %}
                                    }
                                    {% endif %}
                                {% endif %}
                            {% endif %}
                        {% endfor %}
                        {% if 1 not in found %}
                            {% if prop.cardinality == 'OneToMany' %}
                                {{ prop.type | lower }}.get{{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});
                            {% else %}
                                {% if prop.cardinality != 'OneToOne' %}
                                    {{ prop.type | lower }}.get{{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}}().add({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});
                                {%else%}
                                    {{ prop.type | lower }}.set{{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});
                                {% endif %}
                            {% endif %}
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        {% endif %}
    {% endfor %}
    {% if current_class.anotation %}
        {% if current_class.anotation.name =="bill" %}
            {% set variable_name = [] %}
             {% set item_name = [] %}
            {% for m in model.classes%}
                       {% if m.anotation%}
                            {% if m.anotation.name == "bying" %}
                                {% set _ =variable_name.append( m.name) %}
                            {% endif%}
                            {% if m.anotation.name == "item" %}
                                 {% set _ =item_name.append( m.name) %}
                            {% endif%}
                       {% endif%}
            {%endfor%}
            {%if variable_name | length >0%}
                {% for m in model.classes%}
                       {% if m.anotation%}
                            {% if m.anotation.name == "bying" %}

                                {% if m.anotation.how_much == "more" %}

                                    List <{{m.name[0]|capitalize}}{{m.name[1:]}}> {{m.name[0]|lower}}{{m.name[1:]}} = new ArrayList<>();
                                    double price = 0;
                                    for({{item_name[0][0]|capitalize}}{{item_name[0][1:]}}DTO o : {{ basket_name[0][0] | lower }}{{ basket_name[0][1:]}}dto.get{{item_name[0][0]|capitalize}}{{item_name[0][1:]}}()){
                                        {{m.name[0]|lower}}{{m.name[1:]}}.add({{m.name|lower}}Repository.findByItemIdAndIsCurrent(o.getId()));
                                        price += {{m.name[0]|lower}}{{m.name[1:]}}.get({{m.name[0]|lower}}{{m.name[1:]}}.size()-1).getCurrentPrice();
                                    }
                                    {{ current_class.name | lower }}.setTotalPrice(price);
                                    {{ current_class.name | lower }}.set{{m.name[0]|capitalize}}{{m.name[1:]}}({{m.name[0]|lower}}{{m.name[1:]}});
                                     Customer customer = customerRepository.findByUsername({{basket_name[0][0]|lower}}{{basket_name[0][1:]}}dto.getCustomer().getUsername());

                                    {{action_name[0][0]|lower}}{{action_name[0][1:]}}Service.doAction{{action_name_f[0][0]|capitalize}}{{action_name_f[0][1:]}}(customer, bill);
                                {%else%}
                                {{ current_class.name | lower }}.set{{m.name[0]|capitalize}}{{m.name[1:]}}({{m.name|lower}}Repository.findByItemIdAndIsCurrent({{basket_name[0][0]|lower}}{{basket_name[0][1:]}}dto.getItem().getId()));
                                 {{ current_class.name | lower }}.setTotalPrice({{m.name|lower}}Repository.findByItemIdAndIsCurrent({{basket_name[0][0]|lower}}{{basket_name[0][1:]}}dto.getItem().getId()).getCurrentPrice());
                                    Customer customer = customerRepository.findByUsername({{basket_name[0][0]|lower}}{{basket_name[0][1:]}}dto.getCustomer().getUsername());
                                  {{action_name[0][0]|lower}}{{action_name[0][1:]}}Service.doAction{{action_name_f[0][0]|capitalize}}{{action_name_f[0][1:]}}(customer, bill);
                                {% endif %}
                            {% endif %}
                       {% endif %}
                 {%endfor%}
            {% endif %}
        {% endif %}
        {% if current_class.anotation.name =="action" %}
        String transformedCode = callPyController.callPythonPost({{ current_class.name | lower }}dto.getOriginalCode());
        String part =transformedCode.split("model\":\"")[1].split("}")[0];

        {{ current_class.name | lower }}.setTransformedCode(part.substring(0, part.length() - 1));
        {{ current_class.name | lower }}.setOriginalCode({{ current_class.name | lower }}dto.getOriginalCode());

        {% endif %}
    {% endif %}
    {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }} s = {{ current_class.name | lower }}Repository.save({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});
    return {{ current_class.name | lower }}Mapper.toDTO(s);
}
{% if current_class.anotation.name =="action" %}
public String generateCode(String originalCode, long id){
    String code= "package uns.ac.rs.mbrs.gen;\nimport uns.ac.rs.mbrs.model.*;\n" +
            "\n" +
            "public class GeneratedCode"+id+" {\n" +
            "    public  void execute(Customer customer, Bill bill){\n" +originalCode +
            "}\n" +
            "\n" +
            "}";

return code;
}

public void doActionMake(Customer customer, Bill current_bill ) throws Exception {
        List<{{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}> {{ current_class.name | lower }}s = {{ current_class.name | lower }}Repository.findValidActions(new Date());
        for ({{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}} a : {{ current_class.name | lower }}s){
            dynamicCodeExecution.execute(generateCode(a.getTransformedCode(), a.getId()), a.getId(), customer, current_bill);
        }

}

{% endif %}

    public {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}DTO update(long id,{{ current_class.name }}DTO {{ current_class.name | lower }}dto) {
    Optional<{{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}> {{ current_class.name[0]|lower }}{{ current_class.name[1:] }} = {{ current_class.name|lower }}Repository.findById(id);
    if ({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.isPresent()){
            {% for property in current_class.attributes %}
            {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get().set{{property.name[0]|capitalize}}{{property.name[1:]}}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}dto.get{{property.name[0]|capitalize}}{{property.name[1:]}}());
            {%endfor%}



                    {% for prop in current_class.reference_properties %}
        {% if prop.upper == -1 %}
        {% if not "_" in prop.mapped_by|string %}
        List<{{ prop.type | capitalize }}> {{ prop.name | lower }}s = new ArrayList<>();
        for (Long d : {{ current_class.name | lower }}dto.get{{ prop.name[0] | capitalize }}{{ prop.name[1:] }}Ids()) {
            {{ prop.type | capitalize }} {{ prop.type | lower }} = {{ prop.type | lower }}Repository.getById(d);
            {{ prop.name | lower }}s.add({{ prop.type | lower }});

{% set found = [] %}
{% for model_cl in model.classes if not found %}
    {% if model_cl.name == prop.name %}
        {% for p in model_cl.reference_properties %}
            {% if p.name == current_class.name %}
                {% set _ = found.append(1) %}
                {% if prop.cardinality == 'OneToMany' %}

                {{ prop.type | lower }}.set{% if p.as_part != "" and p.as_part!="*"%}{{ p.as_part[0] | capitalize }}{{ p.as_part[1:] }}{% else %}{{ p.name[0] | capitalize }}{{ p.name[1:] }}{% endif %}({{ p.name[0] | lower }}{{ p.name[1:] }}.get());

                {% else %}
                {% if prop.cardinality == 'OneToOne' %}
                {{ prop.type | lower }}.set{% if p.as_part != "" and p.as_part!="*"%}{{ p.as_part[0] | capitalize }}{{ p.as_part[1:] }}{% else %}{{ p.name[0] | capitalize }}{{ p.name[1:] }}{% endif %}({{ p.name[0] | lower }}{{ p.name[1:] }}.get());
                {%else%}
                 {{ prop.type | lower }}.get{% if p.as_part != "" and p.as_part!="*"%}{{ p.as_part[0] | capitalize }}{{ p.as_part[1:] }}{% else %}{{ p.name[0] | capitalize }}{{ p.name[1:] }}{% endif %}().add({{ p.name[0] | lower }}{{ p.name[1:] }}.get());
{% endif %}
            {% endif %}
            {% endif %}
        {% endfor %}
        {% if 1 not in found %}
        {% if prop.cardinality == 'OneToMany' %}
        {{ prop.type | lower }}.set{{ current_class.name[0] | capitalize }}{{ current_class.name[1:] }}({{ current_class.name[0] | lower }}{{ current_class.name[1:] }});
        {%else%}
        {% if prop.cardinality != 'OneToOne' %}
    {{ prop.type | lower }}.get{{ current_class.name[0] | capitalize }}{{ current_class.name[1:] }}().add({{ current_class.name[0] | lower }}{{ current_class.name[1:] }});
    {%else%}
    {{ prop.type | lower }}.set{{ current_class.name[0] | capitalize }}{{ current_class.name[1:] }}({{ current_class.name[0] | lower }}{{ current_class.name[1:] }});

{% endif %}
{% endif %}
{% endif %}
    {% endif %}
{% endfor %}

        }

        {{ current_class.name | lower }}.get().set{% if prop.as_part != "" and prop.as_part!="*"%}{{ prop.as_part | capitalize }}({{ prop.name | lower }}s){%else%}{{ prop.name | capitalize }}({{ prop.name | lower }}s){%endif%};
        {% endif %}
{% endif %}
        {% if prop.upper != -1 %}
        {% if not "_" in prop.mapped_by|string %}

{% set found = [] %}
{% for model_cl in model.classes if not found %}
    {% if model_cl.name == prop.name %}
        {% for p in model_cl.reference_properties %}
            {% if p.name == current_class.name %}
                {% set _ = found.append(1) %}
                    if({{ current_class.name | lower }}dto.get{% if prop.as_part!="" and prop.as_part!="*"%}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}{%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}{%endif%}()!=null) {

                    {% if prop.cardinality == 'OneToMany' %}
                    {% if is_str(prop.type)%}
                    {{ prop.type[0] | capitalize }}{{ prop.type[1:]}} {{ prop.type | lower }} ={{ prop.type | lower }}Repository.getById({{ current_class.name | lower }}dto.getId());

                    {%else%}
                    {{ prop.type.name[0] | capitalize }}{{ prop.type.name[1:]}} {{ prop.type | lower }} ={{ prop.type | lower }}Repository.getById({{ current_class.name | lower }}dto.getId());

                    {%endif%}
                    {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get().set{% if p.as_part!="" and p.as_part!="*"%}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}{%endif%}({{ prop.type | lower }});

                    {{ prop.type | lower }}.set{% if p.as_part!="" and prop.as_part!="*"%}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ p.name[0]|capitalize }}{{ p.name[1:]}}{%endif%}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});

                    {% else %}
                     {% if is_str(prop.type)%}
                     {{ prop.type[0] | capitalize }}{{ prop.type[1:]}} {{ prop.type | lower }} ={{ prop.type | lower }}Repository.getById({{ current_class.name | lower }}dto.get{% if prop.as_part!="" and prop.as_part!="*"%}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}(){%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}(){%endif%}.getId());

                     {%else%}
                     {{ prop.type.name[0] | capitalize }}{{ prop.type.name[1:]}} {{ prop.type | lower }} ={{ prop.type | lower }}Repository.getById({{ current_class.name | lower }}dto.get{% if prop.as_part!="" and prop.as_part!="*"%}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}(){%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}(){%endif%}.getId());

                     {%endif%}
                    {{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get().set{% if prop.as_part!="" and prop.as_part!="*"%}{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:]}}{%else%}{{ prop.name[0]|capitalize }}{{ prop.name[1:]}}{%endif%}({{ prop.type | lower }});
{% if prop.cardinality != 'OneToOne' %}
                    {{ prop.type | lower }}.get{% if p.as_part!="" and p.as_part!="*"%}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ p.name[0]|capitalize }}{{ p.name[1:]}}{%endif%}().add({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get());
{%else%}
                    {{ prop.type | lower }}.set{% if p.as_part!="" and p.as_part!="*"%}{{ p.as_part[0]|capitalize }}{{ p.as_part[1:]}}{%else%}{{ p.name[0]|capitalize }}{{ p.name[1:]}}{%endif%}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get());

{% endif %}
}
{% endif %}
        {% endif %}
        {% endfor %}
                {% if 1 not in found %}
                 {% if prop.cardinality == 'OneToMany' %}
                 {{ prop.type | lower }}.get{{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }});

                  {% else %}
                  {% if prop.cardinality != 'OneToOne' %}
        {{ prop.type | lower }}.get{{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}}().add({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get());
        {%else%}
        {{ prop.type | lower }}.set{{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}}({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get());

        {% endif %}
        {% endif %}
        {% endif %}
        {% endif %}
        {% endfor %}

        {% endif %}
        {% endif %}
        {% endfor %}
            {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }} s = {{ current_class.name|lower }}Repository.save({{ current_class.name[0]|lower }}{{ current_class.name[1:] }}.get());
            return {{ current_class.name|lower }}Mapper.toDTO(s);
        }
        return null;


       }

     public Optional<{{ current_class.name }}> partialUpdate({{ current_class.name }} {{ current_class.name|lower }}) {

    return {{ current_class.name|lower }}Repository
        {% if hasIdProperty %}
        .findById({{ current_class.name|lower }}.get{{ idName|capitalize }}())
        {% else %}
        .findById({{ current_class.name|lower }}.getId())
        {% endif %}
        .map(existing{{ current_class.name }} -> {

            {% for property in current_class.attributes %}
            {% if property.type == "String" or property.type == "char" %}
            if ({{ current_class.name|lower }}.get{{ property.name[0]|capitalize }}{{ property.name[1:]}}() != null) {
            {% elif property.type == "boolean" %}
            if ({{ current_class.name|lower }}.get{{ property.name[0]|capitalize }}{{ property.name[1:]}}() != false) {
            {% elif property.type in ["int", "Integer", "double", "Double", "long", "float"] %}
            if ({{ current_class.name|lower }}.get{{ property.name[0]|capitalize }}{{ property.name[1:]}}() != 0) {
            {% else %}
            if ({{ current_class.name|lower }}.get{{ property.name[0]|capitalize }}{{ property.name[1:]}}() != null) {
            {% endif %}
                existing{{ current_class.name }}.set{{ property.name[0]|capitalize }}{{ property.name[1:]}}({{ current_class.name|lower }}.get{{ property.name[0]|capitalize }}{{ property.name[1:]}}());
            }
            {% endfor %}

            return existing{{ current_class.name }};
        })
        .map({{ current_class.name|lower }}Repository::save);
}

@Transactional(readOnly = true)
public List<{{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}DTO> findAll() {
    List<{{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}> {{ current_class.name|lower }}s = {{ current_class.name|lower }}Repository.findAll();
    List<{{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}DTO> dtos = new ArrayList<>();
    for ({{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}} s : {{ current_class.name|lower }}s){
        {{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}DTO dto = {{ current_class.name| lower }}Mapper.toDTO(s);
        dtos.add(dto);
    }
    return dtos;
}

@Transactional(readOnly = true)
public {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}DTO findOne(Long id) throws NotFoundException {
    Optional<{{ current_class.name[0] | capitalize }}{{ current_class.name[1:]}}> maybe{{ current_class.name }} =  {{ current_class.name|lower }}Repository.findById(id);
    if (maybe{{ current_class.name }}.isPresent()) {
        {{ current_class.name[0]|capitalize }}{{ current_class.name[1:]}} {{ current_class.name|lower }} = maybe{{ current_class.name }}.get();
        {% for property in current_class.reference_properties %}
        {% if property.upper == 1 %}
        {{ property.name[0]|capitalize }}{{ property.name[1:] }} {{ property.name|lower }} = {{ property.name }}Repository.getById({{ current_class.name|lower }}.get{{ property.name|capitalize }}().getId());
        {{ current_class.name|lower }}.set{{ property.name|capitalize }}({{ property.name }});
        {% endif %}
        {% endfor %}
        return {{ current_class.name|lower }}Mapper.toDTO({{ current_class.name|lower }});
    }
    throw new NotFoundException("");
}

public void delete(Long id) {
    Optional<{{ current_class.name }}> maybe{{ current_class.name }} = {{ current_class.name|lower }}Repository.findById(id);

    if (maybe{{ current_class.name }}.isPresent()) {
        {{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }} existing{{ current_class.name }} = maybe{{ current_class.name }}.get();
        existing{{ current_class.name }}.setDeleted(true);
        {% for property in current_class.reference_properties %}
        if (existing{{ current_class.name }}.get{% if property.as_part!="" and property.as_part!="*" %}{{ property.as_part[0]|capitalize }}{{ property.as_part[1:]}}{%else%}{{ property.name[0]|capitalize }}{{ property.name[1:]}}{%endif%}() != null){
            {% if property.upper == -1 %}
            for ({{ property.type }} p: existing{{ current_class.name }}.get{% if property.as_part !="" and property.as_part!="*" %}{{ property.as_part[0]|capitalize }}{{ property.as_part[1:]}}{% else %}{{ property.name[0]|capitalize }}{{ property.name[1:]}}{% endif %}()){
                p.setDeleted(true);
            }
            {% else %}
            existing{{ current_class.name }}.get{% if property.as_part!="" and property.as_part!="*"%}{{ property.as_part[0]|capitalize }}{{ property.as_part[1:]}}{%else%}{{ property.name[0]|capitalize }}{{ property.name[1:]}}{%endif%}().setDeleted(true);
            {% endif %}
        }
        {% endfor %}

        {{ current_class.name|lower }}Repository.save(existing{{ current_class.name }});
    }
}

{% for prop in reference_properties %}
    {% if prop.upper == -1 and prop.cardinality == "ManyToMany" %}
    public Object find{{ prop.name|capitalize }}Of{{ current_class.name|capitalize }}({{ idType }} {{ idName }}) {
        Optional<{{ current_class.name|capitalize }}> {{ current_class.name|lower }}={{ current_class.name|lower }}Repository.findById({{ idName }});
        if ({{ current_class.name|lower }}.isPresent()){
            List<{{ prop.type.name[0]|capitalize }}{{ prop.type.name[1:] }}DTO> dtos = new ArrayList<>();
            for ({{ prop.type|capitalize }} g : {{ current_class.name|lower }}.get().get{{ prop.name|capitalize }}()){
                {{ prop.type|capitalize }}DTO dto = {{ prop.type|lower }}Mapper.toDTO(g);
                dtos.add(dto);
            }
            return dtos;
        }
        return new ArrayList<>();
    }
    {% elif prop.upper == -1 and prop.cardinality == "OneToMany" %}
    public List<{{ prop.type|capitalize }}DTO> find{{ prop.name|capitalize }}Of{{ current_class.name|capitalize }}({{ idType }} {{ idName }}) {
        List<{{ prop.type|capitalize }}> {{ prop.type|lower }}s = {{ prop.type|lower }}Repository.findAllBy{{ current_class.name|capitalize }}Id({{ idName }});
        List<{{ prop.type|capitalize }}DTO> dtos = new ArrayList<>();
        for ({{ prop.type|capitalize }} {{ prop.type|lower }} : {{ prop.type|lower }}s){
            dtos.add({{ prop.type|lower }}Mapper.toDTO({{ prop.type|lower }}));
        }
        return dtos;
    }
    {% endif %}
{% endfor %}

     public List<{{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}DTO> get() {
        List<{{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}> list = {{ current_class.name|lower }}Repository.findAll();
        List<{{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }}DTO> list2 = new ArrayList<>();
        for({{ current_class.name[0]|capitalize }}{{ current_class.name[1:] }} a : list){
            list2.add({{ current_class.name|lower }}Mapper.toDTO(a));
        }
        return list2;
    }

    {% if current_class.anotation%}
        {% if current_class.anotation.name == "basket"%}
        @Transactional
        public {{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}DTO updateWithItem(Long {{ current_class.name|lower }}Id, Long itemId, int quantity) throws NotFoundException {
        Optional<{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}> maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}} = basketRepository.findById({{ current_class.name|lower }}Id);
        Optional<Item> maybeItem = itemRepository.findById(itemId);
        if(maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.isPresent() && maybeItem.isPresent()) {
           {% for m in model.classes%}
                {% if m.anotation%}
                    {% if m.anotation.name == "bying" %}
                                {% if m.anotation.how_much == "one" %}

            maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get().setItem(maybeItem.get());
            maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get().setQuantity(quantity);
            return {{ current_class.name|lower }}Mapper.toDTO({{ current_class.name|lower }}Repository.save(maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get()));
                                {%else%}
            int ind =0;
            boolean found = false;
            for(Item i : maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get().getItem()){
                if (i.getId() == itemId){

                    try{
                    maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get().getQuantity().set(ind, Integer.valueOf(quantity));
                    found = true;
                    }catch (IndexOutOfBoundsException e){
                        maybeBasket.get().getQuantity().add( Integer.valueOf(quantity));
                        found = true;
                    }
                }
            ind+=1;
            }
            if (!found){
                maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get().getItem().add(maybeItem.get());
                maybeItem.get().getBasket().add(maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get());
                itemRepository.save(maybeItem.get());
                maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get().getQuantity().add(Integer.valueOf(quantity));
            }
return {{ current_class.name|lower }}Mapper.toDTO({{ current_class.name|lower }}Repository.save(maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get()));

            {%endif%}
            {%endif%}
            {%endif%}
            {%endfor%}
        }
        throw new NotFoundException("{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}} or item didnt found");
    }
    @Transactional
    public {{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}DTO removeItem(Long {{ current_class.name|lower }}Id, Long itemId) throws NotFoundException {
        Optional<{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}> maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}} = {{ current_class.name|lower }}Repository.findById({{ current_class.name|lower }}Id);
        Optional<Item> maybeItem = itemRepository.findById(itemId);
        if(maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.isPresent() && maybeItem.isPresent()) {
             {% for m in model.classes%}
                {% if m.anotation%}
                    {% if m.anotation.name == "bying" %}
                                {% if m.anotation.how_much == "one" %}
            maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get().setItem(null);
            maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get().setQuantity(0);
            //return {{ current_class.name|lower }}Mapper.toDTO({{ current_class.name|lower }}Repository.save(maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get()));
                                 {%else%}
            int ind =0;
            boolean found = false;
            for(Item i : maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get().getItem()) {
                if (i.getId() == itemId) {
                    maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get().getQuantity().remove(ind);
                    maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get().getItem().remove(ind);
                     i.get{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}().remove(maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get());
                    itemRepository.save(i);
                    break;
                }
                ind += 1;
            }
            {%endif%}
             {%endif%}
              {%endif%}
              {%endfor%}
               return {{ current_class.name[0]|lower}}{{ current_class.name[1:]}}Mapper.toDTO({{ current_class.name[0]|lower}}{{ current_class.name[1:]}}Repository.save( maybe{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}.get()));
        }
        throw new NotFoundException("{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}} or item didnt found");
    }
    {%endif%}
     {% if current_class.anotation.name == "bill"%}
         @Transactional
        public {{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}DTO saveWithId( long id) throws Exception {
        {{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}} {{ current_class.name[0]|lower}}{{ current_class.name[1:]}} = new {{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}();
            Basket basket = basketRepository.getById(id);
            Optional<Customer> customer = customerRepository.findById(basket.getCustomer().getId());
            if (customer.isPresent()){
            {{ current_class.name[0]|lower}}{{ current_class.name[1:]}}.setCustomer(customer.get());
            customer.get().get{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}().add({{ current_class.name[0]|lower}}{{ current_class.name[1:]}});
        List <ItemWithPrice> itemWithPrice = new ArrayList<>();
        double price = 0;
  {% for m in model.classes%}
    {% if m.anotation%}
        {% if m.anotation.name == "bying" %}
            {% if m.anotation.how_much == "more" %}
        int counter=0;
        for(Item o : customer.get().getBasket().getItem()){
            ItemWithPrice iwp = itemwithpriceRepository.findByItemIdAndIsCurrent(o.getId());
            itemWithPrice.add(iwp);
            if (iwp.getItem().getQuantity()-customer.get().getBasket().getQuantity().get(counter)<0){
                throw new Exception("Not enough items");
            }
            iwp.getItem().setQuantity(iwp.getItem().getQuantity()-customer.get().getBasket().getQuantity().get(counter));
            price += itemWithPrice.get(itemWithPrice.size()-1).getCurrentPrice();
            customer.get().getBasket().setItem(new ArrayList<>());
            customer.get().getBasket().setQuantity(new ArrayList<>());
            counter++;
            }
            {{ current_class.name[0]|lower}}{{ current_class.name[1:]}}.setItemWithPrice(itemWithPrice);
              {%else%}

                Item o =customer.get().getBasket().getItem();

                    ItemWithPrice iwp = itemwithpriceRepository.findByItemIdAndIsCurrent(customer.get().getBasket().getItem().getId());
                    if (iwp==null){
                        throw new NotFoundException("There is no current price");
                    }
                    itemWithPrice.add(iwp);
                    if (iwp.getItem().getQuantity()-customer.get().getBasket().getQuantity()<0){
                        throw new Exception("Not enough items");
                    }
                    iwp.getItem().setQuantity(iwp.getItem().getQuantity()-customer.get().getBasket().getQuantity());
                    price += itemWithPrice.get(itemWithPrice.size()-1).getCurrentPrice();
                customer.get().getBasket().setItem(null);
                customer.get().getBasket().setQuantity(0);
                {{ current_class.name[0]|lower}}{{ current_class.name[1:]}}.setItemWithPrice(itemWithPrice.get(0));
        {%endif%}
        {%endif%}
        {%endif%}
        {%endfor%}
        {{ current_class.name[0]|lower}}{{ current_class.name[1:]}}.setTotalPrice(price);
        actionService.doActionMake(customer.get(), {{ current_class.name[0]|lower}}{{ current_class.name[1:]}});
        {{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}} s = {{ current_class.name[0]|lower}}{{ current_class.name[1:]}}Repository.save({{ current_class.name[0]|lower}}{{ current_class.name[1:]}});
        return {{ current_class.name[0]|lower}}{{ current_class.name[1:]}}Mapper.toDTO(s);}
        throw new Exception("There is no customer with that id");
    }
     {%endif%}
{%endif%}

}