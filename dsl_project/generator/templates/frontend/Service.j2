import axios from 'axios';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import AuthService from './auth.service';
const ENDPOINTS = {
    BASE: 'http://localhost:8080/api/{{current_class.name[0]|lower}}{{current_class.name[1:]}}/',
};

class {{current_class.name[0]|capitalize}}{{current_class.name[1:]}}Service {
    {% if current_class.anotation and (current_class.anotation.name == 'basket' or current_class.anotation.name == 'bill')%}
    getCustomersBy{{current_class.name[0]|capitalize}}{{current_class.name[1:]}} = async (id) => {
    const headers = AuthService.authHeader(false);
        try {
            return await axios.get(
                ENDPOINTS.BASE+"getCustomersBy{{current_class.name[0]|capitalize}}{{current_class.name[1:]}}/"+id,
                {headers: headers}
            );
        } catch (error) {
         toast.error('Failed to get element.');
            return error;
        }
    };
    {%endif%}
    get{{current_class.name[0]|capitalize}}{{current_class.name[1:]}} = async () => {
    const headers = AuthService.authHeader(false);
        try {
            return await axios.get(
                ENDPOINTS.BASE,{headers: headers}
            );
        } catch (error) {
        toast.error('Failed to get element.');
            return error;
        }
    };
    getOne{{current_class.name[0]|capitalize}}{{current_class.name[1:]}} = async (id) => {
    const headers = AuthService.authHeader(false);
        try {
            return await axios.get(
                ENDPOINTS.BASE +id,{headers: headers}
            );
        } catch (error) {
        toast.error('Failed to get element.');
            return error;
        }
    };
    create{{current_class.name[0]|capitalize}}{{current_class.name[1:]}} = async ({{current_class.name[0]|lower}}{{current_class.name[1:]}}) => {
        const headers = AuthService.authHeader(false);
        try {
            return await axios.post(
                ENDPOINTS.BASE,
                {{current_class.name[0]|lower}}{{current_class.name[1:]}}
                ,{headers: headers}
            );
        } catch (error) {
        toast.error('Failed to create element.');
            return error;
        }
    };
    update{{current_class.name[0]|capitalize}}{{current_class.name[1:]}} = async ({{current_class.name[0]|lower}}{{current_class.name[1:]}}, id) => {
        const headers = AuthService.authHeader(false);
        try {
            return await axios.put(
                ENDPOINTS.BASE+id,
                {{current_class.name[0]|lower}}{{current_class.name[1:]}}
                ,{headers: headers}
            );
        } catch (error) {
        toast.error('Failed to update element.');
            return error;
        }
    };
    delete{{current_class.name[0]|capitalize}}{{current_class.name[1:]}} = async (id) => {
        const headers = AuthService.authHeader(false);
        try {
            return await axios.delete(
                ENDPOINTS.BASE+id,{headers: headers}
            );
        } catch (error) {
        toast.error('Failed to delete element.');
            return error;
        }
    };
     {% if current_class.anotation%}
                    {% if current_class.anotation.name=="basket"%}
    addItemToBasket= async (basket_id, item_id, quantity) => {
        const headers = AuthService.authHeader(false);
        try {
            return await axios.put(
                ENDPOINTS.BASE+basket_id+"/"+item_id+"/"+quantity,{headers: headers}
            );
        } catch (error) {
        toast.error('Failed to add item to basket element.');
            return error;
        }
    };
    removeItem = async (basketId, itemId) => {
        const headers = AuthService.authHeader(false);
        try {
            return await axios.put(
                ENDPOINTS.BASE+basketId+"/"+itemId,{headers: headers}
            );
        } catch (error) {
        toast.error('Failed to remove item from basket element.');
            return error;
        }
    }
    {%endif%}
       {% if current_class.anotation.name=="bill"%}
    makeBill = async (basket) => {
        const headers = AuthService.authHeader(false);
        try {
            return await axios.post( 
                ENDPOINTS.BASE,
                basket ,{headers: headers}
            );
        } catch (error) {
        toast.error('Failed to make bill element.');
            return error;
        }
    };
    makeBillWithId = async (id) => {
        const headers = AuthService.authHeader(false);
        try {
            return await axios.post(
                ENDPOINTS.BASE + `make-with-id/${id}`,{headers: headers}
            );
        } catch (error) {
        toast.error('Failed to make bill element.');
            return error;
        }
    };
    {%endif%}
    {%endif%}

     {% if current_class.anotation and current_class.anotation.name == 'item'%}
    getItemsByActions= async (id) => {
        const headers = AuthService.authHeader(false);
        try {
            return await axios.get(
                ENDPOINTS.BASE+"getByAction/"+id,{headers: headers}
            );
        } catch (error) {
        toast.error('Failed to get items by action element.');
            return error;
        }
    };
    {%endif%}
    
}

const {{current_class.name[0]|lower}}{{current_class.name[1:]}}Service = new {{current_class.name[0]|capitalize}}{{current_class.name[1:]}}Service();
export default {{current_class.name[0]|lower}}{{current_class.name[1:]}}Service;