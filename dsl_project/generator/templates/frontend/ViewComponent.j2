import React, { useState,  useEffect } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import Button from '@material-ui/core/Button';
import {{current_class.name[0]|capitalize}}{{current_class.name[1:]}}Delete from './{{current_class.name[0]|capitalize}}{{current_class.name[1:]}}Delete';
import { useParams } from 'react-router-dom';
import { useNavigate } from 'react-router-dom';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableContainer from '@material-ui/core/TableContainer';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import Paper from '@material-ui/core/Paper';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
{%if current_class.anotation and current_class.anotation.name == 'action'%}
import itemService from '../../services/ItemService';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import CardActions from '@material-ui/core/CardActions';
{%endif%}
import {{current_class.name[0]|lower}}{{current_class.name[1:]}}Service from '../../services/{{current_class.name[0]|capitalize}}{{current_class.name[1:]}}Service';
{% if current_class.anotation%}
     {% if current_class.anotation.name=="basket"%}
import billService from '../../services/BillService';
import itemService from '../../services/ItemService';
     {%endif%}
       {% if current_class.anotation.name=="item"%}
import basketService from '../../services/BasketService';
import TextField from '@material-ui/core/TextField';
     {%endif%}
      {%endif%}
const useStyles = makeStyles((theme) => ({
  root: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'flex-start',
    width: '100%',
    marginLeft: '50px',
    marginRight: 'auto',
  },
  formGroup: {
    marginBottom: theme.spacing(2),
  },
  buttonGroup: {
    marginTop: theme.spacing(2),
  },
}));

const {{current_class.name[0]|capitalize}}{{current_class.name[1:]}}View = () => {
  const navigate = useNavigate();
  const classes = useStyles();
{% if current_class.anotation%}
     {% if current_class.anotation.name=="basket"%}
const [allItem, setAllItem] = useState([]);
     {%endif%}
     {%endif%}
  const { id } = useParams();
  const [{{current_class.name[0]|lower}}{{current_class.name[1:]}}, set{{current_class.name[0]|capitalize}}{{current_class.name[1:]}}] = useState(NaN)
  const [userType] = useState(
    JSON.parse(localStorage.getItem('user'))
        ? JSON.parse(localStorage.getItem('user')).userType
        : '');
        {%if current_class.anotation and current_class.anotation.name == 'action'%}
    const [items, setItems] = useState([]);
{%endif%}
  useEffect(() => {
    const fetchData = async () => {
      try {
          const response = await {{current_class.name[0]|lower}}{{current_class.name[1:]}}Service.getOne{{current_class.name[0]|capitalize}}{{current_class.name[1:]}}(id);
          if (response.status === 200) {
              set{{current_class.name[0]|capitalize}}{{current_class.name[1:]}}(response.data);
              {% if current_class.anotation%}
     {% if current_class.anotation.name=="basket"%}
 setAllItem([response.data.item]);
     {%endif%}
     {%endif%}
          }
          {%if current_class.anotation and current_class.anotation.name == 'action'%}
           const responseItems = await itemService.getItemsByActions(id);
          if (responseItems.status === 200) {
              setItems(responseItems.data);
          }
          {%endif%}
           {% if current_class.anotation and (current_class.anotation.name == 'basket' or current_class.anotation.name == 'bill')%}
            //{{current_class.anotation.name}}
          const responseCustomer = await {{current_class.name[0]|lower}}{{current_class.name[1:]}}Service.getCustomersBy{{current_class.name[0]|capitalize}}{{current_class.name[1:]}}(id);
      {%endif%}
      } catch (error) {
          console.error(error);
      }
  };
  fetchData();
  }, [id]);

  const handleEdit = (id) => {
    navigate(`/edit-{{current_class.name|lower}}/${id}`);
  };
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [delId, setDelId] = useState(-1);

  const handleDelete = (id) => {
    setDelId(id)
    setIsDialogOpen(true);
  };
  const handleCancelDelete = () => {
    setDelId(-1)
    setIsDialogOpen(false);
  };

  const handleConfirmDelete = (coffeeId) => {
    console.log("Deleting coffee with ID:", coffeeId);
    setIsDialogOpen(false);
  };

  {% if current_class.anotation%}
     {% if current_class.anotation.name=="basket"%}
  const handleMakeBill = (e) => {
      e.preventDefault();
      const fetchData = async () => {
      const response = await billService.makeBillWithId(id);
      if (response.status === 200 || response.status === 201 ) {
        const idSaved = response.data.id
        navigate(`/bill-view/`+idSaved);
      }

    };
    fetchData();
  }
  const handleRemoveItem = (itemId) => {
    if ( !allItem) return;
    for (const item of allItem) {
      if (item.id === itemId) {
        const updatedCurrentItem = allItem.filter(itemItem => itemItem.id !== itemId);
        setAllItem(updatedCurrentItem);
        break;
      }
    }
    const fetchData = async () => {
    const response = await basketService.removeItem(id, itemId);
    }
    fetchData();
  }
     {%endif%} 
     {%endif%}

   {% if current_class.anotation%}
                    {% if current_class.anotation.name=="item"%} 

       const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };
  const [formData, setFormData] = useState({
    quantity: '',
  });
  const handleAddToBasket = (e) => {
    const basketId= 1;
        const fetchData = async () => {
          try {
            console.log(formData)
            console.log(formData.quantity)
              const response = await basketService.addItemToBasket(basketId, id,formData.quantity);
              if (response.status === 200 || response.status === 201) {
                navigate(`/table-item`);
              }
          } catch (error) {
              console.error(error);
          }
      };
      fetchData();
  };
       {%endif%}{%endif%}

       {%if current_class.anotation and current_class.anotation.name == 'action'%}
        const handleView = (id) => {
        navigate(`/item-view/${id}`);
        };
       {%endif%}

  return (
  <div>
    <ToastContainer />
    <div className={classes.root}>
      <h2  >Nesto</h2>

      <p>ID: {id}</p>
      {% for prop in current_class.attributes %}
      <div className={classes.formGroup}>
        <label>{{prop}}: </label>
        <label>{% raw %} { {% endraw %} {{current_class.name[0]|lower}}{{current_class.name[1:]}}.{{prop}} {% raw %} } {% endraw %}</label>
      </div>
        {% endfor %}
        {%if current_class.anotation and current_class.anotation.name == 'action'%}
        <Grid container spacing={3}>
        {items.map((item, index) => (
          <Grid item key={index} xs={12} sm={6} md={4}>
            <Card className={classes.card}>
              <CardContent>
                <Typography className={classes.title} color="textSecondary" gutterBottom>
                  Index: {index + 1}
                </Typography>
                <Typography variant="h5" component="h2">
                  {item.name}
                </Typography>
                <Typography className={classes.pos} color="textSecondary">
                  Quantity: {item.quantity}
                </Typography>
              </CardContent>
              <CardActions>
                <Button size="small" variant="contained" color="secondary" onClick={() => handleView(item.id)}>
                  View
                </Button>

              </CardActions>
            </Card>
          </Grid>
        ))}
      </Grid>

        {%endif%}

          {% if current_class.anotation%}
     {% if current_class.anotation.name=="basket"%}

      <TableContainer component={Paper}>
        <Table className={classes.table} aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell align="center">Id</TableCell>
              <TableCell align="center">Name</TableCell>
              <TableCell align="center">Remove</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {allItem.map((item, index) => (
              <TableRow key={index}>
                <TableCell align="center">
                  {item.id}
                </TableCell>
                <TableCell align="center">
                  {item.name}
                </TableCell>
                <TableCell align="center">
                  <Button variant="contained" color="primary" onClick={() => handleRemoveItem(item.id)}>Remove</Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer><br/>
      {%endif%}
      {%endif%}
         {% if current_class.anotation%}
                    {% if current_class.anotation.name=="item"%}
        <label>Input quantity: </label>
      <form className={classes.root}>
      <div className={classes.formGroup}>

        <TextField
          name="quantity"
          value={formData.quantity}
          type="number"
          onChange={handleChange}
          variant="outlined"
        />
      </div>
      </form>
       {%endif%}{%endif%}
      <div className={classes.buttonGroup}>
       {% if current_class.anotation%}
                    {% if current_class.anotation.name=="item"%}
       <Button variant="contained" color="primary" onClick={() => handleAddToBasket(id)}>Add to basket</Button>
       {%endif%}{%endif%}
       {% if current_class.anotation%}
                    {% if current_class.anotation.name=="basket"%}
        <Button variant="contained" color="primary" onClick={handleMakeBill}>
         By
        </Button>{%endif%}{%endif%}
         {%if current_class.anotation  and  current_class.anotation.name == 'basket'%}{(userType=='CUSTOMER' ) && (
        <Button variant="contained" color="primary" onClick={() => handleEdit(id)}>Edit</Button>)}
        {%else%}
        {(userType=='ADMIN' || userType=='SELLER') && (
         <Button variant="contained" color="primary" onClick={() => handleEdit(id)}>Edit</Button>)}
        {%endif%}
        {%if current_class.name == 'Admin' or current_class.name == 'Customer'%}{(userType=='ADMIN' ) && (
        <Button variant="contained" color="secondary" onClick={() => handleDelete(id)}>Delete</Button>)}
        {%else%}
        {(userType=='ADMIN' || userType=='SELLER') && (
        <Button variant="contained" color="secondary" onClick={() => handleDelete(id)}>Delete</Button>)}
        {%endif%}

      </div>
      {%if current_class.name == 'Admin' or current_class.name == 'Customer'%}
      {(userType=='ADMIN' ) && (
      < {{current_class.name[0]|capitalize}}{{current_class.name[1:]}}Delete
        open={isDialogOpen}
        id={delId}
        onCancel={handleCancelDelete}
        onDelete={handleConfirmDelete}
      />
      )}
      {%else%}
      {(userType=='ADMIN' || userType=='SELLER') && (
      < {{current_class.name[0]|capitalize}}{{current_class.name[1:]}}Delete
        open={isDialogOpen}
        id={delId}
        onCancel={handleCancelDelete}
        onDelete={handleConfirmDelete}
      />
      )}
      {%endif%}
    </div></div>
  );
};

export default {{current_class.name[0]|capitalize}}{{current_class.name[1:]}}View;