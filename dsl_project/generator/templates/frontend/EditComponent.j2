import React, { useState,  useEffect } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import TextField from '@material-ui/core/TextField';
import Button from '@material-ui/core/Button';
import { useParams } from 'react-router-dom';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableContainer from '@material-ui/core/TableContainer';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import Paper from '@material-ui/core/Paper';
import {{current_class.name[0]|lower}}{{current_class.name[1:]}}Service from '../../services/{{current_class.name[0]|capitalize}}{{current_class.name[1:]}}Service';
import { useNavigate } from 'react-router-dom';
import NativeSelect from '@mui/material/NativeSelect';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

{% for property in current_class.reference_properties %}
import {{property.name[0]|lower}}{{property.name[1:]}}Service from '../../services/{{property.name[0]|capitalize}}{{property.name[1:]}}Service';
{% endfor %}
 {% if current_class.anotation%}
     {% if current_class.anotation.name=="bying"%}
import itemService from '../../services/ItemService';
{%endif%}
{%endif%}

const useStyles = makeStyles((theme) => ({
  root: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'flex-start',
    width: '100%',
    marginLeft: '50px',
    marginRight: 'auto',
  },
  formGroup: {
    marginBottom: theme.spacing(2),
    margin: theme.spacing(2),
  },
  buttonGroup: {
    marginTop: theme.spacing(2),
  },
  textField: {
    '& label': {
      transform: 'translate(14px, -6px) scale(0.75)',
    },
    '& input': {
      padding: '18.5px 14px',
    },
  },
}));

const Edit{{current_class.name[0]|capitalize}}{{current_class.name[1:]}} = () => {
 const [userType] = useState(
    JSON.parse(localStorage.getItem('user'))
        ? JSON.parse(localStorage.getItem('user')).userType
        : '');
  const classes = useStyles();
  const [formData, setFormData] = useState({
  {% for property in current_class.attributes %}
    {{property}}: '',
   {%endfor%}
{% if current_class.anotation%}
     {% if current_class.anotation.name=="action"%}
    dateFrom: '',
    dateTo: '',
    originalCode: '',
{%endif%}
{%endif%}
    {% if current_class.anotation%}
       {% if current_class.anotation.name=="bying"%}
  currentPrice: 0,
{%endif%}
{%endif%}
  });
  const { id } = useParams();
   {% if current_class.anotation%}
                    {% if current_class.anotation.name=="bying"%}
  const [items, setItems] = useState([]);
  const [selectedItem, setSelectedItem] = useState('');
{%endif%}
{%endif%}
  {% for property in current_class.reference_properties %}
  {% if property.upper is defined and property.upper == -1 %}
  const [current{{property.name[0]|capitalize}}{{property.name[1:]}}, setCurrent{{property.name[0]|capitalize}}{{property.name[1:]}}] = useState([]);
  const [all{{property.name[0]|capitalize}}{{property.name[1:]}}, setAll{{property.name[0]|capitalize}}{{property.name[1:]}}] = useState([]);
  {%else%}
  const [{{property.name[0]|lower}}{{property.name[1:]}}s, set{{property.name[0]|capitalize}}{{property.name[1:]}}s] = useState([]);
  const [selected{{property.name[0]|capitalize}}{{property.name[1:]}}, setSelected{{property.name[0]|capitalize}}{{property.name[1:]}}] = useState('');

  {%endif%}
  {%endfor%}

  useEffect(() => {

  {% if current_class.anotation%}
                    {% if current_class.anotation.name=="bying"%}
 const fetchDataItem = async () => {
      try {
          const response= await itemService.getItem();
          if (response.status === 200) {
            setItems(response.data);
        }
      } catch (error) {
       toast.error('Failed to create item. Please try again.');
          console.error(error);
      }
  };
  fetchDataItem();
{%endif%}
{%endif%}

  {% for property in current_class.reference_properties %}
  {% if property.upper is defined and property.upper != -1 %}
  const fetchData{{property.name[0]|capitalize}}{{property.name[1:]}} = async () => {
      try {
          const response= await {{property.name[0]|lower}}{{property.name[1:]}}Service.get{{property.name[0]|capitalize}}{{property.name[1:]}}();
          if (response.status === 200) {
            set{{property.name[0]|capitalize}}{{property.name[1:]}}s(response.data);
        }
      } catch (error) {
          console.error(error);
      }
  };
  fetchData{{property.name[0]|capitalize}}{{property.name[1:]}}();
  {%endif%}
  {%endfor%}

    if (id!=null){
    return () => {
      const fetchData = async () => {
        try {
            {%if current_class.anotation and current_class.anotation.name =='basket'%}
            const response = await {{current_class.name[0]|lower}}{{current_class.name[1:]}}Service.getCustomersByBasket(id);
            {%else%}
            const response = await {{current_class.name[0]|lower}}{{current_class.name[1:]}}Service.getOne{{current_class.name[0]|capitalize}}{{current_class.name[1:]}}(id);
            {%endif%}
            if (response.status === 200) {
             {% if current_class.anotation.name=="bying"%}
              setSelectedItem(response.data.getItem().getId());
              {%endif%}
              setFormData({
               {% if current_class.anotation.name=="bying"%}
               currentPrice: response.data.currentPrice,
              {%endif%}
              {% for property in current_class.attributes %}
                 {{property}}: response.data.{{property}},
              {%endfor%}
              {% if current_class.anotation%}

     {% if current_class.anotation.name=="action"%}
              name: response.data.name,
              dateFrom: response.data.dateFrom,
              dateTo: response.data.dateTo,
              originalCode: response.data.originalCode
              {%endif%}{%endif%}
              })
            }
        } catch (error) {
         toast.error('Failed to create item. Please try again.');
            console.error(error);
        }
    };
    fetchData();
      console.log('Component unmounted');
    };}
 {% for property in current_class.reference_properties %}
  {% if property.upper is defined and property.upper == -1 %}
    const fetchData{{property.name}} = async () => {
      try {
          const response2 = await {{property.name[0]|lower}}{{property.name[1:]}}Service.get{{property.name[0]|capitalize}}{{property.name[1:]}}();
          if (response2.status === 200) {
            setAll{{property.name[0]|capitalize}}{{property.name[1:]}}(response2.data);
        }
      } catch (error) {
       toast.error('Failed to create item. Please try again.');
          console.error(error);
      }
  };
  fetchData{{property.name}}();
  {%endif%}
  {%endfor%}
  }, [id]);


  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };
  const navigate = useNavigate();
  const handleSubmit = (e) => {
    if (id!=null){
        e.preventDefault();
        const fetchData = async () => {
          try {
          {% if current_class.anotation%}
                    {% if current_class.anotation.name=="bying"%}
  for(let j in items){
              if (parseInt(selectedItem)===parseInt(items[j].id)){
                formData['item'] = items[j];

                break;
              }
            }
            setFormData({
              currentPrice: response.data.currentPrice,
           })
           console.log(formData);
{%endif%}
{%endif%}
               {% for property in current_class.reference_properties %}
                {% if property.upper is defined and property.upper == -1 %}

                {% if not  "_" in property.mapped_by|string %}
              let li{{property.name}} = [];
              for (let a of current{{property.name[0]|capitalize}}{{property.name[1:]}}){
                li{{property.name}}.push(a.id);
              }
              formData['{{property.name[0]|lower}}{{property.name[1:]}}Ids'] = li{{property.name}};
              {%endif%}
              {%else%}
              for(let j in {{property.name[0]|lower}}{{property.name[1:]}}s){
                if (parseInt(selected{{property.name[0]|capitalize}}{{property.name[1:]}})===parseInt({{property.name[0]|lower}}{{property.name[1:]}}s[j].id)){
                  formData['{{property.name[0]|lower}}{{property.name[1:]}}'] = {{property.name[0]|lower}}{{property.name[1:]}}s[j];
                  break;
                }
              }
              {%endif%}
              {%endfor%}
              const response = await {{current_class.name[0]|lower}}{{current_class.name[1:]}}Service.update{{current_class.name[0]|capitalize}}{{current_class.name[1:]}}(formData, id);
              if (response.status === 200) {
               toast.success('Item created successfully!');
                navigate(`/table-{{current_class.name[0]|lower}}{{current_class.name[1:]}}`);
              }
          } catch (error) {
           toast.error('Failed to create item. Please try again.');
              console.error(error);
          }
      };
      fetchData();
    }
  else{
    e.preventDefault();
    console.log(formData);
    const fetchData = async () => {
      try {
{% if current_class.anotation%}
                    {% if current_class.anotation.name=="bying"%}
           for(let j in items){
          if (parseInt(selectedItem)===parseInt(items[j].id)){
            formData['item'] = items[j];
            break;
          }
        }
        {%endif%}{%endif%}
      {% set id = [] %}
      {% for property in current_class.reference_properties %}
                {% if property.upper is defined and property.upper == -1 %}
                {%  if not "_" in property.mapped_by|string %}
                {% set _ = id.append(0) %}
              let li{{id | length}} = [];
              for (let a of current{{property.name[0]|capitalize}}{{property.name[1:]}}){
                li{{id | length}}.push(a.id);
              }
              formData['{{property.name[0]|lower}}{{property.name[1:]}}Ids'] = li{{id | length}};
              {%endif%}
              {%else%}
              for(let j in {{property.name[0]|lower}}{{property.name[1:]}}s){
                if (parseInt(selected{{property.name[0]|capitalize}}{{property.name[1:]}})===parseInt({{property.name[0]|lower}}{{property.name[1:]}}s[j].id)){
                  formData['{{property.name[0]|lower}}{{property.name[1:]}}'] = {{property.name[0]|lower}}{{property.name[1:]}}s[j];
                  break;
                }
              }
              {%endif%}
              {%endfor%}
          const response = await {{current_class.name[0]|lower}}{{current_class.name[1:]}}Service.create{{current_class.name[0]|capitalize}}{{current_class.name[1:]}}(formData);
          if (response.status === 200) {
           toast.success('Item created successfully!');
              navigate(`/table-{{current_class.name[0]|lower}}{{current_class.name[1:]}}`);
          }
      } catch (error) {
       toast.error('Failed to create item. Please try again.');
          console.error(error);
      }
  };
  fetchData();
  }
  };

  const handleCancel = () => {
    console.log('Form canceled');
  };

  {% for property in current_class.reference_properties %}
  {% if property.upper is defined and property.upper == -1 %}
  const handleRemove{{property.name[0]|capitalize}}{{property.name[1:]}} = (id) => {
    if (!current{{property.name[0]|capitalize}}{{property.name[1:]}} || !all{{property.name[0]|capitalize}}{{property.name[1:]}}) return;

    for (const item of current{{property.name[0]|capitalize}}{{property.name[1:]}}) {
      if (item.id === id) {
        const updatedCurrent{{property.name[0]|capitalize}}{{property.name[1:]}} = current{{property.name[0]|capitalize}}{{property.name[1:]}}.filter({{property.name[0]|lower}}{{property.name[1:]}}Item => {{property.name[0]|lower}}{{property.name[1:]}}Item.id !== id);
        setCurrent{{property.name[0]|capitalize}}{{property.name[1:]}}(updatedCurrent{{property.name[0]|capitalize}}{{property.name[1:]}});
        const updatedAll{{property.name[0]|capitalize}}{{property.name[1:]}} = [...all{{property.name[0]|capitalize}}{{property.name[1:]}}, item];
        setAll{{property.name[0]|capitalize}}{{property.name[1:]}}(updatedAll{{property.name[0]|capitalize}}{{property.name[1:]}});

        break;
      }
    }
  }


  const handleAdd{{property.name[0]|capitalize}}{{property.name[1:]}} = (id) => {
    if (!current{{property.name[0]|capitalize}}{{property.name[1:]}} || !all{{property.name[0]|capitalize}}{{property.name[1:]}}) return;

    for (const item of all{{property.name[0]|capitalize}}{{property.name[1:]}}) {
      if (item.id === id) {
        const updatedAll{{property.name[0]|capitalize}}{{property.name[1:]}} = all{{property.name[0]|capitalize}}{{property.name[1:]}}.filter({{property.name[0]|lower}}{{property.name[1:]}}Item => {{property.name[0]|lower}}{{property.name[1:]}}Item.id !== id);
        setAll{{property.name[0]|capitalize}}{{property.name[1:]}}(updatedAll{{property.name[0]|capitalize}}{{property.name[1:]}});
        const updatedCurrent{{property.name[0]|capitalize}}{{property.name[1:]}} = [...current{{property.name[0]|capitalize}}{{property.name[1:]}}, item];
        setCurrent{{property.name[0]|capitalize}}{{property.name[1:]}}(updatedCurrent{{property.name[0]|capitalize}}{{property.name[1:]}});

        break;
      }
    }
  }
  {%else%}
    const handleChange{{property.name[0]|capitalize}}{{property.name[1:]}} = (event) => {
      console.log(event.target.value)
        setSelected{{property.name[0]|capitalize}}{{property.name[1:]}}(event.target.value);
    };
  {%endif%}
  {%endfor%}

 {% if current_class.anotation%}
                    {% if current_class.anotation.name=="bying"%}
 const handleChangeItem = (event) => {
    console.log(event.target.value)
      setSelectedItem(event.target.value);
  };
{%endif%}
{%endif%}

  return (
  <div>
    <ToastContainer />
    <form className={classes.root} onSubmit={handleSubmit}>
      <h2  >{{current_class.name}}</h2>
      <p>ID: {id}</p>
      {% if current_class.anotation%}
     {% if current_class.anotation.name=="action"%}
        <div className={classes.formGroup}>
        <TextField
          label="Original Code"
          name="originalCode"
          value={formData.originalCode}
          onChange={handleChange}
          variant="outlined"
          style={{ width: '600px' }}
        />
      </div>
      <div className={classes.formGroup}>
        <TextField
          label="Date From"
          name="dateFrom"
          type="date"
          value={formData.dateFrom}
          onChange={handleChange}
          variant="outlined"
          className={classes.textField}
        />
      </div>
      <div className={classes.formGroup}>
        <TextField
          label="Date To"
          name="dateTo"
          type="date"
          value={formData.dateTo}
          onChange={handleChange}
          variant="outlined"
           className={classes.textField}
        />
      </div>
      {%endif%}{%endif%}

      {% for property in current_class.attributes %}
      <div className={classes.formGroup}>
        <TextField
          label="{{property}}"
          name="{{property}}"
          value={formData.{{property}}}
          {% if property.type == 'int' or property.type == 'float' or property.type == 'byte' or property.type == 'short' or property.type == 'long' or property.type == 'double'%}
          type="number"
          {% endif%}
          onChange={handleChange}
          variant="outlined"
        />
      </div>
      {% endfor %}



      {% for property in current_class.reference_properties %}
      {% if property.upper is defined and property.upper == -1 %}
        {% if not "_" in property.mapped_by|string %}
        {{property.name}}
        <TableContainer component={Paper}>
        <Table className={classes.table} aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell align="center">Id</TableCell>
              <TableCell align="center">Add</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {current{{property.name[0]|capitalize}}{{property.name[1:]}}.map((item, index) => (
              <TableRow key={index}>
                <TableCell align="center">
                  {item.id}
                </TableCell>
                <TableCell align="center">
                  <Button variant="contained" color="primary" onClick={() => handleRemove{{property.name[0]|capitalize}}{{property.name[1:]}}(item.id)}>Remove</Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer><br/>
      <TableContainer component={Paper}>
        <Table className={classes.table} aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell align="center">Id</TableCell>
              <TableCell align="center">Remove</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {all{{property.name[0]|capitalize}}{{property.name[1:]}}.map((item, index) => (
              <TableRow key={index}>
                <TableCell align="center">
                  {item.id}
                </TableCell>
                <TableCell align="center">
                  <Button variant="contained" color="primary" onClick={() => handleAdd{{property.name[0]|capitalize}}{{property.name[1:]}}(item.id)}>Add</Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
        {%endif%}
      {%else%}

      <div>
            <label htmlFor="dvaSelect">Select {{property.name[0]|capitalize}}{{property.name[1:]}}: </label>
            <NativeSelect id="dvaSelect" value={selected{{property.name[0]|capitalize}}{{property.name[1:]}}} onChange={handleChange{{property.name[0]|capitalize}}{{property.name[1:]}}}>
                <option value="">--Please choose an option--</option>{
                 {{property.name[0]|lower}}{{property.name[1:]}}s.map({{property.name[0]|lower}}{{property.name[1:]}} => (
                    <option  key={
                    {{property.name[0]|lower}}{{property.name[1:]}}.id} value={
                    {{property.name[0]|lower}}{{property.name[1:]}}.id}>
                        {
                        {{property.name[0]|lower}}{{property.name[1:]}}.id}
                    </option >
                ))}
            </NativeSelect>
        </div>

      {%endif%}
      {%endfor%}
      {% if current_class.anotation%}
                    {% if current_class.anotation.name=="bying"%}
   <div className={classes.formGroup}>
        <TextField
          label="currentPrice"
          name="currentPrice"
          value={formData.currentPrice}
          type="number"
          onChange={handleChange}
          variant="outlined"
        />
      </div>
      <label htmlFor="dvaSelect">Select Item: </label>
      <NativeSelect id="dvaSelect" value={selectedItem} onChange={handleChangeItem}>
                <option value="">--Please choose an option--</option>{
                 items.map(item => (
                    <option  key={
                    item.id} value={
                    item.id}>
                        {
                        item.id}
                    </option >
                ))}
            </NativeSelect>
{%endif%}
{%endif%}
      <div className={classes.buttonGroup}>
        <Button variant="contained" color="primary" type="submit">
          Submit
        </Button>
        <Button variant="contained" color="secondary" onClick={handleCancel}>
          Cancel
        </Button>
      </div>
    </form>
    </div>
  );
};

export default Edit{{current_class.name[0]|capitalize}}{{current_class.name[1:]}};
