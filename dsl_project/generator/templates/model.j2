{# Check primitiveProperties #}
{% for atr in current_class.attributes %}
  {% if atr.isEnum %}
    {% set hasEnum = true %}
  {% endif %}
{% endfor %}

package uns.ac.rs.mbrs.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.Where;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.*;
import java.util.Date;
import uns.ac.rs.mbrs.model.*;
import lombok.Getter;
import lombok.Setter;
{% if hasEnum == true %}import uns.ac.rs.mbrs.enumeration.*;
{% endif %}

@AllArgsConstructor
@Entity
@Where(clause = "deleted = false")
@Table(name = "{{ current_class.name|lower }}")
@Getter
@Setter
public  class {{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}} {% if current_class.extends_user%} extends User{%endif%} {
    {% if not current_class.extends_user%}
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;
    {%endif%}
    {% set is_one = ["one"] %}
    {% set variable_name = [] %}
    {% set variable_name_price = [] %}
    {% set basket_name = [] %}
    {% for m in model.classes%}
        {% if m.anotation%}
            {% if m.anotation.name == "bying" %}
                {% if m.anotation.how_much == "more" %}
                      {% set _ = is_one.append("more") %}
                      {% set _ = variable_name_price.append(m.name) %}
                 {% endif%}
            {% endif%}
            {% if m.anotation.name == "item" %}
                 {% set _  =variable_name.append( m.name) %}
            {% endif%}
            {% if m.anotation.name == "basket" %}
                 {% set _ =basket_name.append(m.name) %}
            {% endif%}
        {% endif%}
    {%endfor%}
    {% if current_class.anotation%}
        {% if current_class.anotation.name == "basket" %}

{% for m in model.classes%}
    {% if m.anotation%}
        {% if m.anotation.name == "bying" %}
            {% if m.anotation.how_much == "more" %}
                  {% if current_class.anotation%}
                    {% if current_class.anotation.name=="basket"%}
                @ElementCollection
                @CollectionTable(name = "basket_quantities", joinColumns = @JoinColumn(name = "basket_id"))
                @Column(name = "quantity")
                private List<Integer> quantity;
                     {%else%}
                     private Integer quantity;
 {%endif%}
        {%endif%}
             {%endif%}
        {%endif%}
    {%endif%}
{%endfor%}

            {%if is_one| length ==1%}


                @ManyToOne
                (cascade = CascadeType.ALL, fetch = FetchType.LAZY)
                 {% for m in model.classes%}
                    {% if m.anotation%}
                        {% if m.anotation.name == "bill" %}
                            {% set references = [] %}
                            {% for p in m.reference_properties %}
                                {% if p.name != current_class.name and p.name not in references %}
                                    {% set _ = references.append(p.name | lower) %}
                                {% endif %}
                            {% endfor %}

                            {% if references %}
                                @JsonIgnoreProperties(value = "{{ references | join(', ') }}", allowSetters = true)
                        {%endif%}
                    {% endif %}
                    {% endif %}
                {% endfor %}
                private {{variable_name[0][0]|capitalize}}{{variable_name[0][1:]}}  {{variable_name[0][0]|lower}}{{variable_name[0][1:]}};

            {%else%}
                @ManyToMany

                 (cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "{{current_class.name[0]|lower}}{{current_class.name[1:]}}"         )
                 {% for m in model.classes%}
                    {% if m.anotation%}
                        {% if m.anotation.name == "bill" %}
                            {% set references = [] %}
                            {% for p in m.reference_properties %}
                                {% if p.name != current_class.name and p.name not in references %}
                                    {% set _ = references.append(p.name | lower) %}
                                {% endif %}
                            {% endfor %}

                            {% if references %}
                                @JsonIgnoreProperties(value = "{{ references | join(', ') }}", allowSetters = true)
                        {%endif%}
                    {% endif %}
                    {% endif %}
                {% endfor %}
                private List<{{variable_name[0][0]|capitalize}}{{variable_name[0][1:]}}>  {{variable_name[0][0]|lower}}{{variable_name[0][1:]}};
            {%endif%}
        {%endif%}
        {% if current_class.anotation.name == "item" %}
        {% if variable_name_price | length > 0 %}
            @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY,mappedBy = "{{current_class.name[0]|lower}}{{current_class.name[1:]}}")

            private List<{{variable_name_price[0][0]|capitalize}}{{variable_name_price[0][1:]}}>  {{variable_name_price[0][0]|lower}}{{variable_name_price[0][1:]}};
            {%endif%}
            {%if is_one| length ==1%}
                @OneToMany
                (cascade = CascadeType.ALL, fetch = FetchType.LAZY,mappedBy = "{{current_class.name|lower}}"        )
                private List<{{basket_name[0][0]|capitalize}}{{basket_name[0][1:]}}>  {{basket_name[0][0]|lower}}{{basket_name[0][1:]}};
            {%else%}
                @ManyToMany(cascade = CascadeType.ALL,fetch = FetchType.LAZY)
                @JoinTable(
                        name = "{{current_class.name|lower}}_{{basket_name[0]| lower}}",
                        joinColumns = @JoinColumn(name = "{{current_class.name|lower}}_id"),
                        inverseJoinColumns = @JoinColumn(name = "{{basket_name[0]|lower}}_id")
                )
                {% for m in model.classes%}
                    {% if m.anotation%}
                        {% if m.anotation.name == "bill" %}
                            {% set references = [] %}
                            {% for p in m.reference_properties %}
                                {% if p.name != current_class.name and p.name not in references %}
                                    {% set _ = references.append(p.name | lower) %}
                                {% endif %}
                            {% endfor %}

                            {% if references %}
                                @JsonIgnoreProperties(value = "{{ references | join(', ') }}", allowSetters = true)
                        {%endif%}
                    {% endif %}
                    {% endif %}
                {% endfor %}
                private List<{{basket_name[0][0]|capitalize}}{{basket_name[0][1:]}}>  {{basket_name[0][0]|lower}}{{basket_name[0][1:]}};
            {%endif%}

        {%endif%}
    {% if current_class.anotation.name == "action" %}
    @Column(name="date_from")
    private Date dateFrom;

    @Column(name="date_to")
    private Date dateTo;

    @Column(name="original_code")
    private String originalCode;

    @Column(name="transformed_code")
    private String transformedCode;
    {%endif%}
    {% if current_class.anotation.name == "bying" %}
    @Column(name="currentprice")
    private double currentPrice;

    @Column(name="iscurrent")
    private boolean iscurrent; //is it still valid
       {% for m in model.classes%}
           {% if m.anotation%}
               {% if m.anotation.name == "item" %}
               @ManyToOne
                (cascade = CascadeType.ALL, fetch = FetchType.LAZY)
                {% set references = [] %}
                {% for p in m.reference_properties %}
                    {% if p.name != current_class.name and p.name not in references %}
                        {% set _ = references.append(p.name | lower) %}
                    {% endif %}
                {% endfor %}
                 {% if references %}
                @JsonIgnoreProperties(value = "{{ references | join(', ') }}", allowSetters = true){%endif%}
                private {{m.name[0]|capitalize}}{{m.name[1:]}}  {{m.name[0]|lower}}{{m.name[1:]}};
               {%endif%}
               {% if m.anotation.name == "bill" %}
                  {% if current_class.anotation.how_much == 'one'%}
            @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY ,mappedBy = "{{current_class.name[0]|lower}}{{current_class.name[1:]}}")
            {%else%}

            @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "{{current_class.name[0]|lower}}{{current_class.name[1:]}}")
            {%endif%}
             {% set references = [] %}
                {% for p in m.reference_properties %}
                    {% if p.name != current_class.name and p.name not in references %}
                        {% set _ = references.append(p.name | lower) %}
                    {% endif %}
                {% endfor %}
                 {% if references %}
            @JsonIgnoreProperties(value = "{{ references | join(', ') }}", allowSetters = true)
            private List<{{m.name[0]|capitalize}}{{m.name[1:]}}>  {{m.name[0]|lower}}{{m.name[1:]}};
            {%endif%}

        {%endif%}
         {%endif%}
        {%endfor%}
       {%endif%}
        {% if current_class.anotation.name == "bill" %}
    @Column(name="total_price")
    private double totalPrice;

        {% for m in model.classes%}
        {% if m.anotation%}
         {% if m.anotation.name == "bying" %}
            {% if m.anotation.how_much == "one" %}
    @ManyToOne(cascade = CascadeType.ALL,fetch = FetchType.LAZY)
    {% set references = [] %}
                {% for p in m.reference_properties %}
                    {% if p.name != current_class.name and p.name not in references %}
                        {% set _ = references.append(p.name | lower) %}
                    {% endif %}
                {% endfor %}
                 {% if references %}
    @JsonIgnoreProperties(value = "{{ references | join(', ') }}", allowSetters = true)
                 {% endif %}

    private {{m.name[0]|capitalize}}{{m.name[1:]}} {{m.name[0]|lower}}{{m.name[1:]}};

            {%else%}

            @ManyToMany(cascade = CascadeType.ALL,fetch = FetchType.LAZY)
            @JoinTable(
                    name = "{{current_class.name[0]|lower}}{{current_class.name[1:]}}_{{m.name[0]|lower}}{{m.name[1:]}}",
                    joinColumns = @JoinColumn(name = "{{current_class.name[0]|lower}}{{current_class.name[1:]}}_id"),
                    inverseJoinColumns = @JoinColumn(name = "{{m.name[0]|lower}}{{m.name[1:]}}_id")
            )
    {% set references = [] %}
                {% for p in m.reference_properties %}
                    {% if p.name != current_class.name and p.name not in references %}
                        {% set _ = references.append(p.name | lower) %}
                    {% endif %}
                {% endfor %}
                 {% if references %}
    @JsonIgnoreProperties(value = "{{ references | join(', ') }}", allowSetters = true)
                 {% endif %}
    private List<{{m.name[0]|capitalize}}{{m.name[1:]}}>  {{m.name[0]|lower}}{{m.name[1:]}};
{% endif %}
 {% endif %}
         {%endif%}
        {%endfor%}
    {%endif%}

    {%endif%}
    {% for property in current_class.attributes %}
        {% if property %}

    @Column(name="{{ property.name|lower }}"{% if property.length is defined or property.unique is defined or property.lower is defined and property.lower == 0 %}
            {% endif %})
            {% if property.isEnum == true %}
    @Enumerated(Enum_type.STRING)
            {% endif %}
    private {% if property.type == "date" %}Date{% else %}{% if property.type == "string" %}{{ property.type | capitalize }}{%else%}{{ property.type}}{%endif%}{% endif %} {{ property.name[0]|lower }}{{ property.name[1:] }};
        {% endif %}
    {% endfor %}
    @Column(name="deleted", unique = false)
    private boolean deleted;

    {% for property in current_class.reference_properties %}

        {% if property.upper is defined and property.cardinality %}
            @{{ property.cardinality }}
        {% endif %}
        {% if "*" in property.as_part | string %}
        @JoinColumn
        {% endif %}
        {% if property.fetch_type is defined or property.cascade_type is defined or property.mapped_by is not none %}
        (
            {% if property.cascade_type and property.as_part!="*"%}
                cascade = CascadeType.{{ property.cascade_type }}
            {% endif %}
            {% if property.fetch_type and property.as_part!="*"%}
                {% if property.cascade_type %}, {% endif %}
                fetch = FetchType.{{ property.fetch_type }}
            {% endif %}
            {% if property.mapped_by is not none%}
                {% if property.cascade_type or property.fetch_type %} {% endif %}
                {% if property.mapped_by != "" and "_" not in property.mapped_by|string %},mappedBy = "{{ property.mapped_by}}" {%else%}
                 {% if "_" not in property.mapped_by|string %}
                ,mappedBy = "{{ current_class.name|lower }}"{% endif %}{% endif %}
            {% endif %}
        )
         {% if "_" in property.mapped_by|string %}
         {% set parts = property.mapped_by.split("_") %}
         @JoinTable(
                    name = "{{property.mapped_by}}",
                    joinColumns = @JoinColumn(name = "{{ parts[0] }}_id"),
                    inverseJoinColumns = @JoinColumn(name = "{{ parts[1] }}_id")
            )
         {%endif%}
        {% endif %}
        {% for model_cl in model.classes %}
            {% if model_cl.name == property.name %}
                {% set references = [] %}
                {% for p in model_cl.reference_properties %}
                    {% if p.name != current_class.name and p.name not in references %}
                        {% set _ = references.append(p.name | lower) %}
                    {% endif %}
                {% endfor %}
                 {% if references %}
                    @JsonIgnoreProperties(value = "{{ references | join(', ') }}", allowSetters = true)
                 {% endif %}
            {% endif %}
        {% endfor %}

        {% if property.type is defined and property.name is defined %}
        private {% if property.upper is defined and property.upper == -1 %}List<{% endif %}{{ property.name[0]|capitalize }}{{ property.name[1:] }}{% if property.upper is defined and property.upper == -1 %}> {% endif %} {% if property.as_part!="" and property.as_part!="*"%}{{ property.as_part[0]|lower }}{{ property.as_part[1:]}}{% else %}{{ property.name[0]|lower }}{{ property.name[1:]}}{%endif%};
        {% endif %}
    {% endfor %}

    public {{ current_class.name }}() {}
    {% if hasId == false %}
     {% if current_class.name !="Customer"%}
        public long getId(){
            return id;
        }
        public void setId(long id){
            this.id = id;
        }
        {% endif %}
    {% endif %}
    {% for property in primitiveProperties %}
        {% if property and property.type and property.name %}
            public {% if property.type == "date" %}Date{% elif property.generation_type is defined and property.generation_type == "UUID" %}UUID{% else %}{{ property.type }}{% endif %} get{{ property.type|capitalize }}(){
                return {{ property.name[0]|lower}}{{property.name[1:]}};
            }
            public void set{{ property.type|capitalize }}({% if property.type == "date" %}Date{% else %}{{ property.type }}{% endif %} {{ property.name[0]|lower}}{{ property.name[1:] }}){
                this.{{ property.name[0]|lower }}{{ property.name[1:]}} = {{ property.name[0]|lower}}{{ property.name[1:]}};
            }
        {% endif %}
    {% endfor %}

    {% for property in current_class.reference_properties %}
        {% if property and property.type and property.name %}
            public {% if property.upper is defined and property.upper == -1 %} List< {% endif %}{{ property.name[0]|capitalize }}{{ property.name[1:] }} {% if property.upper is defined and property.upper == -1 %}>{% endif %} get{% if property.as_part!="" and property.as_part!="*"%}{{ property.as_part|capitalize }}{%else%}{{ property.name }}{% endif %}() {
                {% if property.as_part!="" and property.as_part!="*" %}
                return {{ property.as_part }};
                {% else %}
                return {{ property.name[0]|lower }}{{ property.name[1:] }};
                {% endif %}
            }
            public void set{% if property.as_part!="" and property.as_part!="*"%}{{ property.as_part|capitalize }}{%else%}{{ property.type|capitalize }}{% endif %}(
            {% if property.upper is defined and property.upper == -1 %}
                List<
            {% endif %}
           {{ property.name[0]|capitalize }}{{ property.name[1:] }}
            {% if property.upper is defined and property.upper == -1 %}
                >
            {% endif %}
            {% if property.as_part!="" and property.as_part!="*"%}
            {{ property.as_part[0]|lower }}{{ property.as_part[1:]}}
             {% else %}
             {{ property.name[0]|lower }}{{ property.name[1:]}}
             {% endif %}
            ) {
            {% if property.as_part!="" and property.as_part!="*"%}
                this.{{ property.as_part[0]|lower}}{{ property.as_part[1:]}} = {{ property.as_part[0]|lower}}{{ property.as_part[1:]}};
            {% else %}
                this.{{ property.name[0]|lower}}{{ property.name[1:]}} = {{ property.name[0]|lower}}{{ property.name[1:]}};
            {% endif %}
            }
        {% endif %}
    {% endfor %}
    public boolean getDeleted() {
        return deleted;
    }
    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }
}
