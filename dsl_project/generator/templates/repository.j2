package uns.ac.rs.mbrs.repository;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.data.jpa.repository.JpaRepository;
import uns.ac.rs.mbrs.model.*;
import java.util.List;
import java.util.Date;

@Repository
public interface {{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}Repository extends JpaRepository<{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}, Long> {

{% for prop in current_class.reference_properties %}
    {% for model_cl in model.classes %}
            {% if model_cl.name == prop.name %}
                {% set references = [] %}
                {% for p in model_cl.reference_properties %}
                    {% if p.name != current_class.name %}
                        {% set _ = references.append('"'+p.name+'"') %}
                    {% endif %}
                {% endfor %}
                 {% if references %}
                    {% if prop.as_part is not none%}
                        {% if prop.as_part != "" and prop.as_part!="*" %}
                        List<{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}> findAllBy{{ prop.as_part[0]|capitalize }}{{ prop.as_part[1:] }}Id(Long id);

                        {%else%}
                        List<{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}> findAllBy{{ prop.name[0]|capitalize }}{{ prop.name[1:] }}Id(Long id);
                        {%endif%}
                    {% else %}
                    List<{{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}}> findAllBy{{ prop.name[0]|capitalize }}{{ prop.name[1:] }}Id(Long id);
                    {% endif %}
                 {% endif %}
            {% endif %}
        {% endfor %}


{% endfor %}

{%  if current_class.name == "Person"%}
    @Query("SELECT p FROM Person p WHERE p.username = :username")
    Person findByUsername(@Param("username")String username);
    {% endif %}
    {%  if current_class.anotation %}
        {% if current_class.anotation.name == "action"%}

     @Query("SELECT a FROM Action a WHERE :currentDate BETWEEN a.dateFrom AND a.dateTo")
    List<Action> findValidActions(@Param("currentDate") Date currentDate);
        {% endif %}
        {% if current_class.anotation.name == "bying" %}
    @Query("SELECT iwp FROM {{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}} iwp WHERE iwp.item.id = :itemId AND iwp.iscurrent = true")
     {{ current_class.name[0]|capitalize}}{{ current_class.name[1:]}} findByItemIdAndIsCurrent(@Param("itemId") long itemId);
        {% endif %}
        {% if current_class.anotation.name == "person" %}
        @Query("SELECT p FROM Person p WHERE p.username = :username")
        Person findByUsername(@Param("username")String username);
     {% endif %}
    {% endif %}
}
