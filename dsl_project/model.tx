Nelly: ( Class | Enum | Relations | File)*;

Class:  'class' ID '{' (Attribute)* '}';

Attribute: name Type ';' ;

Type: ('String' | 'int' | 'float' | 'boolean' | 'byte' | 'short' |  'long' |  'double' | 'char');

Enum: 'enum' ID '{' (enumName)* '}';

enumName: STRING ';' ;

Relations: (OneToOne | OneToMany | ManyToOne | ManyToMany);

OneToOne: 'OneToOne' '{' Link* '}';
OneToMany: 'OneToMany''{' Link* '}';
ManyToOne: 'ManyToOne' '{' Link* '}';
ManyToMany: 'ManyToMany' '{' Link* '}';

Link: name 'to' name ';';
name: STRING;

File: 'file' name '[' Function* ']' ;

Function: 'def' Type ID '(' ParameerList? ')' '{' Statement* '}';

ParameerList: Parameter *( ',' Parameter) ;

Parameter: Type ID ;

CallFunctionStatement: ID '(' Arguments? ')' ';';

Arguments: Argument (',' Argument)*;

Argument: (FunctionCall | ID | value | ShortFunctions |Operations | ChaneId);

FunctionCall: ID '(' Arguments? ')';

ReturnStatement: 'return' ( ID |value | CopyName| CallFunctionStatement | ShortFunctions |  Operations| OneLineCondition | ChaneId)? ';';

Statement: (VariableInit | CopyName | Variable | IfStatement | CallFunctionStatement | ReturnStatement );

VariableInit: Type ID "=" PosibleValuesForVariable ';';

Variable: ID "=" PosibleValuesForVariable ';'?;

PosibleValuesForVariable: (value | CopyName | Condition | CallFunctionStatement |  OneLineCondition | Operations | NewObject | ShortFunctions |ChaneId);

NewObject: "new" name '(' Arguments ')';

IfStatement:
    'if' Conditions '{'
        Statement*
        '}'
    *('elif' Conditions '{'
       Statement* '}')
    ('else' '{'
        Statement* '}')?
;

OneLineCondition: Conditions '?' (PosibleValuesForVariable | ID ) (':' (PosibleValuesForVariable | ID ) )? ';';

Conditions: Condition ( LogicalOperator Condition )*;

LogicalOperator: ('&&' | '||');

Negation: '!';

Condition:  Negation?  ( ID |value | ShortFunctions | CopyName | ChaneId) RelationOperator Negation? (ID | value | CopyName | ShortFunctions | ChaneId) ;

RelationOperator: ('==' | '!=' | '>' | '<' | '>=' | '<=') ;

Operations: (( ID | INT | FLOAT | CopyName | ChaneId) Operator Operations) | (ID | INT | FLOAT | CopyName| ChaneId);

Operator: ('+' | '-' | '*' | '/' | '%' | '^');

ChaneId: ID ('.' ID)*;

Size: 'size' 'of' PosibleLists ;
Count: 'count' 'from' PosibleLists ('as' ( ChaneId|ID))?( WherePart )? ;
All:  'all' 'of' PosibleLists ('as' ( ChaneId|ID))? ( WherePart )?;
Any: 'any' 'of' PosibleLists ('as' ( ChaneId|ID))?( WherePart)?;
NoOne: 'none' 'of' PosibleLists ('as' ID)?( WherePart)?;
Min: 'min' PosibleLists   ('as' ( ChaneId|ID))? ;
Max: 'max' PosibleLists   ('as' ( ChaneId|ID))?;
Add: 'add' (value | CopyName | ChaneId|ID|NewObject) 'in' PosibleLists;
Remove: 'remove'  'from' PosibleLists 'as' ID  WherePart;
Clear : 'clear' PosibleLists;
Index: 'indexOf' (value |CopyName | ChaneId | ID ) 'from' PosibleLists;
Sum: 'sumOf' PosibleLists ('as' (ID | ChaneId | Operations)   WherePart)?;
Average: 'averageOf' PosibleLists ('as' ( ChaneId | ID | Operations)  WherePart)?;
Like: 'like' 'of' PosibleLists ('as' ( ChaneId|ID)  WherePart)?;
SelectIn: 'selectIn' PosibleLists ('as' ( ChaneId|ID)  WherePart)?;
Between: 'between' 'of' PosibleLists  Conditions;
Exist: 'existIn' PosibleLists  (WherePart)?;
ForEach: 'for' ( ChaneId | ID) 'as' ( ChaneId | ID) ForOperation WherePart;
SelectTop: 'selectTop' INT 'of' PosibleLists   (WherePart)?;

ForOperation: ('sum'|'average'|'product' | ID);
PosibleLists: (name |CopyName | ChaneId | FunctionCall | OneLineCondition |ShortFunctions);
CopyName: '#' STRING '#';

WherePart: 'where'  (Conditions | ShortFunctions | CopyName | CallFunctionStatement);

ShortFunctions: ( Size | Count | All | Any | NoOne | Min | Max | Add |Remove | Clear | Index |SelectTop| Sum |Average | Like | SelectIn | Between | Exist | ForEach);

value: (INT | STRING | FLOAT | BOOL );